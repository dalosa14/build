{"version":3,"sources":["components/Balance.tsx","utils/calls/estimateGas.ts","utils/calls/farms.ts","utils/calls/pools.ts","utils/getGasPrice.ts","components/Tags.tsx","components/Layout/Flex.tsx","components/RoiCalculatorModal/useRoiCalculatorReducer.ts","components/RoiCalculatorModal/RoiCalculatorFooter.tsx","components/RoiCalculatorModal/RoiCard.tsx","components/RoiCalculatorModal/AnimatedArrow.tsx","components/RoiCalculatorModal/index.tsx","components/TokenImage/index.tsx"],"names":["Balance","value","color","decimals","isDisabled","unit","prefix","onClick","props","previousValue","useRef","useEffect","current","start","end","suffix","duration","separator","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","a","Error","address","rawGasEstimation","gasEstimation","mul","ethers","BigNumber","from","add","div","callWithEstimateGas","overrides","gasLimit","tx","options","DEFAULT_GAS_LIMIT","stakeFarm","masterChefContract","pid","amount","gasPrice","getGasPrice","times","DEFAULT_TOKEN_DECIMAL","toString","enterStaking","deposit","unstakeFarm","leaveStaking","withdraw","harvestFarm","getActivePools","block","eligiblePools","pools","filter","pool","sousId","isFinished","undefined","simpleRpcProvider","getBlockNumber","blockNumber","startBlockCalls","map","contractAddress","getAddress","name","endBlockCalls","multicall","sousChefV2","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte","userGas","store","getState","user","GAS_PRICE_GWEI","default","process","ChainId","MAINNET","testnet","CoreTag","t","useTranslation","variant","outline","startIcon","width","mr","CommunityTag","DualTag","ManualPoolTag","CompoundingPoolTag","VoteNowTag","SoonTag","ClosedTag","FlexLayout","styled","FlexGap","Flex","gap","EditingCurrency","CalculatorMode","Footer","theme","colors","dropdown","BulletList","ul","textSubtle","RoiCalculatorFooter","isFarm","apr","displayApr","autoCompoundFrequency","multiplier","linkLabel","linkHref","performanceFee","useState","isExpanded","setIsExpanded","useTooltip","my","placement","tooltipOffset","multiplierRef","targetRef","multiplierTooltip","tooltip","multiplierTooltipVisible","tooltipVisible","gridRowCount","apy","getApy","toFixed","p","flexDirection","expanded","prev","px","gridTemplateColumns","gridRowGap","gridTemplateRows","small","textAlign","compoundTimes","justifyContent","alignItems","ref","height","fontSize","display","mt","fee","href","compoundingIndexToFrequency","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","roiCalculatorReducer","state","action","type","payload","toggledCompounding","PRINCIPAL_BASED_ON_ROI","parseFloat","currencyAfterChange","TOKEN","useRoiCalculatorReducer","stakingTokenPrice","earningTokenPrice","useReducer","dispatch","principalInUSDAsNumber","compoundFrequency","interestBreakdown","getInterestBreakdown","principalInUSD","hasInterest","Number","isNaN","roiAsUSD","getRoi","amountEarned","amountInvested","principalForExpectedRoi","getPrincipalForInterest","principalUSD","principalToken","setPrincipalFromUSDValue","principalAsTokenBN","gt","setPrincipalFromTokenValue","useCallback","principalAsUsdBN","principalAsUsdString","setStakingDuration","stakingDurationIndex","toggleCompounding","toggleEditingCurrency","setCompoundingFrequency","setCalculatorMode","modeToSet","setTargetRoi","targetRoiAsTokens","toNumber","MILLION","RoiCardWrapper","Box","radii","RoiCardInner","gradients","bubblegum","RoiInputContainer","RoiDisplayContainer","RoiDollarAmount","Text","fadeOut","background","RoiCard","earningTokenSymbol","calculatorState","expectedRoi","setExpectedRoi","inputRef","focus","onEnterEditing","toLocaleString","minimumFractionDigits","maximumFractionDigits","bold","textTransform","inputMode","pattern","scale","placeholder","onChange","event","currentTarget","validity","valid","roiAsString","target","replace","rotate","keyframes","ArrowContainer","primary","AnimatedArrow","key","setKey","prevKey","prevId","parseInt","split","StyledModal","Modal","ScrollableContainer","mediaQueries","sm","FullWidthButtonMenu","ButtonMenu","disabled","RoiCalculatorModal","onDismiss","onBack","stakingTokenBalance","stakingTokenSymbol","initialValue","account","useActiveWeb3React","balanceInputRef","assetSymbol","editingUnit","editingValue","conversionUnit","conversionValue","onUserInput","title","headerBackground","mb","asset","currencyValue","innerRef","switchEditingUnits","onFocus","isFinite","getBalanceNumber","toLocaleUpperCase","activeIndex","onItemClick","flex","checked","getImageUrlFromToken","token","symbol","tokens","wbnb","TokenPairImage","primaryToken","secondaryToken","primarySrc","secondarySrc","TokenImage","src"],"mappings":"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","file":"static/js/8.a97582dd.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport CountUp from 'react-countup'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\ninterface BalanceProps extends TextProps {\n  value: number\n  decimals?: number\n  unit?: string\n  isDisabled?: boolean\n  prefix?: string\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n}\n\nconst Balance: React.FC<BalanceProps> = ({\n  value,\n  color = 'text',\n  decimals = 3,\n  isDisabled = false,\n  unit,\n  prefix,\n  onClick,\n  ...props\n}) => {\n  const previousValue = useRef(0)\n\n  useEffect(() => {\n    previousValue.current = value\n  }, [value])\n\n  return (\n    <Text color={isDisabled ? 'textDisabled' : color} onClick={onClick} {...props}>\n      <CountUp\n        start={previousValue.current}\n        end={value}\n        prefix={prefix}\n        suffix={unit}\n        decimals={decimals}\n        duration={1}\n        separator=\",\"\n      />\n    </Text>\n  )\n}\n\nexport default Balance\n","import { ethers, Contract, Overrides } from 'ethers'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[],\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = rawGasEstimation\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\n    .div(ethers.BigNumber.from(10000))\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[] = [],\n  overrides: Overrides = {},\n  gasMarginPer10000 = 1000,\n): Promise<ethers.providers.TransactionResponse> => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n    ...overrides,\n  })\n  return tx\n}\n","import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  if (pid === 0) {\n    return masterChefContract.enterStaking(value, { ...options, gasPrice })\n  }\n\n  return masterChefContract.deposit(pid, value, { ...options, gasPrice })\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  if (pid === 0) {\n    return masterChefContract.leaveStaking(value, { ...options, gasPrice })\n  }\n\n  return masterChefContract.withdraw(pid, value, { ...options, gasPrice })\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  const gasPrice = getGasPrice()\n  if (pid === 0) {\n    return masterChefContract.leaveStaking('0', { ...options, gasPrice })\n  }\n\n  return masterChefContract.deposit(pid, '0', { ...options, gasPrice })\n}\n","/* eslint-disable import/prefer-default-export */\nimport BigNumber from 'bignumber.js'\nimport pools from 'config/constants/pools'\nimport sousChefV2 from 'config/abi/sousChefV2.json'\nimport multicall from '../multicall'\nimport { simpleRpcProvider } from '../providers'\nimport { getAddress } from '../addressHelpers'\n\n/**\n * Returns the total number of pools that were active at a given block\n */\nexport const getActivePools = async (block?: number) => {\n  const eligiblePools = pools\n    .filter((pool) => pool.sousId !== 0)\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'startBlock',\n  }))\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\n    address: getAddress(contractAddress),\n    name: 'bonusEndBlock',\n  }))\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\n\n  return eligiblePools.reduce((accum, poolCheck, index) => {\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\n\n    if (!startBlock || !endBlock) {\n      return accum\n    }\n\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\n      return accum\n    }\n\n    return [...accum, poolCheck]\n  }, [])\n}\n","import { ChainId } from '@pancakeswap/sdk'\nimport store from 'state'\nimport { GAS_PRICE_GWEI } from 'state/user/hooks/helpers'\n\n/**\n * Function to return gasPrice outwith a react component\n */\nconst getGasPrice = (): string => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const state = store.getState()\n  const userGas = state.user.gasPrice || GAS_PRICE_GWEI.default\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\n}\n\nexport default getGasPrice\n","import React from 'react'\nimport {\n  Tag,\n  VerifiedIcon,\n  CommunityIcon,\n  RefreshIcon,\n  AutoRenewIcon,\n  TagProps,\n  TimerIcon,\n  BlockIcon,\n  VoteIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CoreTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<VerifiedIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Core')}\n    </Tag>\n  )\n}\n\nconst CommunityTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"failure\" outline startIcon={<CommunityIcon width=\"18px\" color=\"failure\" mr=\"4px\" />} {...props}>\n      {t('Community')}\n    </Tag>\n  )\n}\n\nconst DualTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textSubtle\" outline {...props}>\n      {t('Dual')}\n    </Tag>\n  )\n}\n\nconst ManualPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"secondary\" outline startIcon={<RefreshIcon width=\"18px\" color=\"secondary\" mr=\"4px\" />} {...props}>\n      {t('Manual')}\n    </Tag>\n  )\n}\n\nconst CompoundingPoolTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" outline startIcon={<AutoRenewIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Auto')}\n    </Tag>\n  )\n}\n\nconst VoteNowTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"success\" startIcon={<VoteIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Vote Now')}\n    </Tag>\n  )\n}\n\nconst SoonTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"binance\" startIcon={<TimerIcon width=\"18px\" color=\"success\" mr=\"4px\" />} {...props}>\n      {t('Soon')}\n    </Tag>\n  )\n}\n\nconst ClosedTag: React.FC<TagProps> = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Tag variant=\"textDisabled\" startIcon={<BlockIcon width=\"18px\" color=\"textDisabled\" mr=\"4px\" />} {...props}>\n      {t('Closed')}\n    </Tag>\n  )\n}\n\nexport { CoreTag, CommunityTag, DualTag, ManualPoolTag, CompoundingPoolTag, VoteNowTag, SoonTag, ClosedTag }\n","import { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport const FlexGap = styled(Flex)<{ gap?: string }>`\n  gap: ${({ gap }) => gap};\n`\n\nexport default FlexLayout\n","import { useEffect, useReducer, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers'\n\n/**\n * This hook is handling all the calculator state and calculations.\n * UI connected to it is merely representation of the data and buttons to trigger actions\n */\n\n// Mapping from the compounding frequency button index to actual compounding frequency\n// in number of compounds per day\nconst compoundingIndexToFrequency = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571, // once every 7 days\n  3: 0.033333333, // once every 30 days\n}\n\nconst TOKEN_PRECISION = 10\nconst USD_PRECISION = 2\n\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\nexport enum EditingCurrency {\n  TOKEN,\n  USD,\n}\n\n// Calculator works in 2 modes\nexport enum CalculatorMode {\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\n}\n\nexport interface RoiCalculatorReducerState {\n  controls: {\n    compounding: boolean // Compounding checkbox state\n    compoundingFrequency: number // Compounding frequency in number of compounds per day\n    activeCompoundingIndex: number // index of active compounding button in ButtonMenu\n    stakingDuration: number // index of active staking duration button in ButtonMenu\n    mode: CalculatorMode\n    editingCurrency: EditingCurrency\n  }\n  data: {\n    principalAsToken: string // Used as value for Inputs\n    principalAsUSD: string // Used as value for Inputs\n    roiUSD: number\n    roiTokens: number\n    roiPercentage: number // ROI expressed in percentage relative to principal\n  }\n}\n\nconst initialState: RoiCalculatorReducerState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1, // how many compound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0, // active compounding selected in\n    stakingDuration: 3,\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD,\n  },\n  data: {\n    principalAsToken: '0.00',\n    principalAsUSD: '',\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0,\n  },\n}\n\nconst roiCalculatorReducer = (\n  state: RoiCalculatorReducerState,\n  action: { type: string; payload?: any },\n): RoiCalculatorReducerState => {\n  switch (action.type) {\n    case 'setStakingDuration': {\n      const controls = { ...state.controls, stakingDuration: action.payload }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'toggleCompounding': {\n      const toggledCompounding = !state.controls.compounding\n      const controls = { ...state.controls, compounding: toggledCompounding }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setCompoundingFrequency': {\n      const { index, autoCompoundFrequency } = action.payload\n      if (autoCompoundFrequency) {\n        return {\n          ...state,\n          controls: {\n            ...state.controls,\n            compoundingFrequency: autoCompoundFrequency,\n          },\n        }\n      }\n      const compoundingFrequency = compoundingIndexToFrequency[index]\n      const controls = { ...state.controls, compoundingFrequency, activeCompoundingIndex: index }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setPrincipal': {\n      const { principalAsUSD, principalAsToken } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken }\n      const controls = { ...state.controls, mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL }\n      return {\n        controls,\n        data,\n      }\n    }\n    case 'setPrincipalForTargetRoi': {\n      const { principalAsUSD, principalAsToken, roiPercentage } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken, roiPercentage }\n      return {\n        ...state,\n        data,\n      }\n    }\n    case 'setCalculatorMode': {\n      const mode = action.payload\n      const controls = { ...state.controls, mode }\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n        const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION))\n        const data = { ...state.data, roiUSD }\n        return { controls, data }\n      }\n      return { ...state, controls }\n    }\n    case 'setRoi': {\n      const data = { ...state.data, ...action.payload }\n      return { ...state, data }\n    }\n    case 'setTargetRoi': {\n      const { roiUSD, roiTokens } = action.payload\n      const data = { ...state.data, roiUSD, roiTokens }\n      const controls = { ...state.controls, mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI }\n      return { controls, data }\n    }\n    case 'toggleEditingCurrency': {\n      const currencyAfterChange =\n        state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD\n      const controls = { ...state.controls, editingCurrency: currencyAfterChange }\n      return { ...state, controls }\n    }\n    default:\n      return state\n  }\n}\n\nconst useRoiCalculatorReducer = (\n  stakingTokenPrice: number,\n  earningTokenPrice: number,\n  apr: number,\n  autoCompoundFrequency: number,\n  performanceFee: number,\n) => {\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState)\n  const { principalAsUSD, roiUSD } = state.data\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\n\n  // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n  useEffect(() => {\n    if (autoCompoundFrequency > 0) {\n      dispatch({ type: 'setCompoundingFrequency', payload: { autoCompoundFrequency } })\n    }\n  }, [autoCompoundFrequency])\n\n  // Calculates and sets ROI whenever related values change\n  useEffect(() => {\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\n      const compoundFrequency = compounding ? compoundingFrequency : 0\n      const interestBreakdown = getInterestBreakdown({\n        principalInUSD: principalInUSDAsNumber,\n        apr,\n        earningTokenPrice,\n        compoundFrequency,\n        performanceFee,\n      })\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration])\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\n      const roiPercentage = hasInterest\n        ? getRoi({\n            amountEarned: roiAsUSD,\n            amountInvested: principalInUSDAsNumber,\n          })\n        : 0\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\n    }\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode])\n\n  // Calculates and sets principal based on expected ROI value\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const principalForExpectedRoi = getPrincipalForInterest(\n        roiUSD,\n        apr,\n        compounding ? compoundingFrequency : 0,\n        performanceFee,\n      )\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\n        ? principalForExpectedRoi[stakingDuration]\n        : 0\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice)\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD,\n      })\n      dispatch({\n        type: 'setPrincipalForTargetRoi',\n        payload: {\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\n          roiPercentage,\n        },\n      })\n    }\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee])\n\n  // Handler for compounding frequency buttons\n  const setCompoundingFrequency = (index: number) => {\n    dispatch({ type: 'setCompoundingFrequency', payload: { index } })\n  }\n\n  // Handler for principal input when in USD mode\n  const setPrincipalFromUSDValue = (amount: string) => {\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice)\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00'\n    dispatch({ type: 'setPrincipal', payload: { principalAsUSD: amount, principalAsToken } })\n  }\n\n  // Handler for principal input when in Token mode\n  const setPrincipalFromTokenValue = useCallback(\n    (amount: string) => {\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice)\n      const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00'\n      dispatch({\n        type: 'setPrincipal',\n        payload: { principalAsUSD: principalAsUsdString, principalAsToken: amount },\n      })\n    },\n    [stakingTokenPrice],\n  )\n\n  // Handler for staking duration buttons\n  const setStakingDuration = (stakingDurationIndex: number) => {\n    dispatch({ type: 'setStakingDuration', payload: stakingDurationIndex })\n  }\n\n  // Handler for compounding checkbox\n  const toggleCompounding = () => {\n    dispatch({ type: 'toggleCompounding' })\n  }\n\n  // Handler for principal input mode switch\n  const toggleEditingCurrency = () => {\n    dispatch({ type: 'toggleEditingCurrency' })\n  }\n\n  const setCalculatorMode = (modeToSet: CalculatorMode) => {\n    dispatch({ type: 'setCalculatorMode', payload: modeToSet })\n  }\n\n  // Handler for ROI input\n  const setTargetRoi = (amount: string) => {\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice)\n    dispatch({\n      type: 'setTargetRoi',\n      payload: { roiUSD: +amount, roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber() },\n    })\n  }\n\n  return {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  }\n}\n\nexport default useRoiCalculatorReducer\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, ExpandableLabel, LinkExternal, Grid, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getApy } from 'utils/compoundApyHelpers'\n\nconst Footer = styled(Flex)`\n  width: 100%;\n  background: ${({ theme }) => theme.colors.dropdown};\n`\n\nconst BulletList = styled.ul`\n  list-style-type: none;\n  margin-top: 16px;\n  padding: 0;\n  li {\n    margin: 0;\n    padding: 0;\n  }\n  li::before {\n    content: '•';\n    margin-right: 4px;\n    color: ${({ theme }) => theme.colors.textSubtle};\n  }\n  li::marker {\n    font-size: 12px;\n  }\n`\n\ninterface RoiCalculatorFooterProps {\n  isFarm: boolean\n  apr: number\n  displayApr: string\n  autoCompoundFrequency: number\n  multiplier: string\n  linkLabel: string\n  linkHref: string\n  performanceFee: number\n}\n\nconst RoiCalculatorFooter: React.FC<RoiCalculatorFooterProps> = ({\n  isFarm,\n  apr,\n  displayApr,\n  autoCompoundFrequency,\n  multiplier,\n  linkLabel,\n  linkHref,\n  performanceFee,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { t } = useTranslation()\n  const {\n    targetRef: multiplierRef,\n    tooltip: multiplierTooltip,\n    tooltipVisible: multiplierTooltipVisible,\n  } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>,\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  const gridRowCount = isFarm ? 4 : 2\n  const apy = (getApy(apr, autoCompoundFrequency > 0 ? autoCompoundFrequency : 1, 365, performanceFee) * 100).toFixed(2)\n\n  return (\n    <Footer p=\"16px\" flexDirection=\"column\">\n      <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\n        {isExpanded ? t('Hide') : t('Details')}\n      </ExpandableLabel>\n      {isExpanded && (\n        <Box px=\"8px\">\n          <Grid gridTemplateColumns=\"2.5fr 1fr\" gridRowGap=\"8px\" gridTemplateRows={`repeat(${gridRowCount}, auto)`}>\n            {isFarm && (\n              <>\n                <Text color=\"textSubtle\" small>\n                  {t('APR (incl. LP rewards)')}\n                </Text>\n                <Text small textAlign=\"right\">\n                  {displayApr}%\n                </Text>\n              </>\n            )}\n            <Text color=\"textSubtle\" small>\n              {isFarm ? t('Base APR (CAKE yield only)') : t('APR')}\n            </Text>\n            <Text small textAlign=\"right\">\n              {apr.toFixed(2)}%\n            </Text>\n            <Text color=\"textSubtle\" small>\n              {t('APY (%compoundTimes%x daily compound)', {\n                compoundTimes: autoCompoundFrequency > 0 ? autoCompoundFrequency : 1,\n              })}\n            </Text>\n            <Text small textAlign=\"right\">\n              {apy}%\n            </Text>\n            {isFarm && (\n              <>\n                <Text color=\"textSubtle\" small>\n                  {t('Farm Multiplier')}\n                </Text>\n                <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\n                  <Text small textAlign=\"right\" mr=\"4px\">\n                    {multiplier}\n                  </Text>\n                  <span ref={multiplierRef}>\n                    <HelpIcon color=\"textSubtle\" width=\"16px\" height=\"16px\" />\n                  </span>\n                  {multiplierTooltipVisible && multiplierTooltip}\n                </Flex>\n              </>\n            )}\n          </Grid>\n          <BulletList>\n            <li>\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                {t('Calculated based on current rates.')}\n              </Text>\n            </li>\n            {isFarm && (\n              <li>\n                <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('LP rewards: 0.17% trading fees, distributed proportionally among LP token holders.')}\n                </Text>\n              </li>\n            )}\n            <li>\n              <Text fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                {t(\n                  'All figures are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n                )}\n              </Text>\n            </li>\n            {performanceFee > 0 && (\n              <li>\n                <Text mt=\"14px\" fontSize=\"12px\" textAlign=\"center\" color=\"textSubtle\" display=\"inline\">\n                  {t('All estimated rates take into account this pool’s %fee%% performance fee', {\n                    fee: performanceFee,\n                  })}\n                </Text>\n              </li>\n            )}\n          </BulletList>\n          <Flex justifyContent=\"center\" mt=\"24px\">\n            <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n          </Flex>\n        </Box>\n      )}\n    </Footer>\n  )\n}\n\nexport default RoiCalculatorFooter\n","import React, { useRef, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, Input, CheckmarkIcon, PencilIcon, IconButton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\n\nconst MILLION = 1000000\nconst TRILLION = 1000000000000\n\nconst RoiCardWrapper = styled(Box)`\n  background: linear-gradient(180deg, #53dee9, #7645d9);\n  padding: 1px;\n  width: 100%;\n  border-radius: ${({ theme }) => theme.radii.default};\n`\n\nconst RoiCardInner = styled(Box)`\n  height: 120px;\n  padding: 24px;\n  border-radius: ${({ theme }) => theme.radii.default};\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst RoiInputContainer = styled(Box)`\n  position: relative;\n  & > input {\n    padding-left: 28px;\n    max-width: 70%;\n  }\n  &:before {\n    position: absolute;\n    content: '$';\n    color: ${({ theme }) => theme.colors.textSubtle};\n    left: 16px;\n    top: 8px;\n  }\n`\n\nconst RoiDisplayContainer = styled(Flex)`\n  max-width: 82%;\n  margin-right: 8px;\n`\n\nconst RoiDollarAmount = styled(Text)<{ fadeOut: boolean }>`\n  position: relative;\n  overflow-x: auto;\n  &::-webkit-scrollbar {\n    height: 0px;\n  }\n\n  ${({ fadeOut, theme }) =>\n    fadeOut &&\n    `\n      &:after {\n        background: linear-gradient(\n          to right,\n          ${theme.colors.background}00,\n          ${theme.colors.background}E6\n        );\n        content: '';\n        height: 100%;\n        pointer-events: none;\n        position: absolute;\n        right: 0;\n        top: 0;\n        width: 40px;\n      }\n  `}\n`\n\ninterface RoiCardProps {\n  earningTokenSymbol: string\n  calculatorState: RoiCalculatorReducerState\n  setTargetRoi: (amount: string) => void\n  setCalculatorMode: (mode: CalculatorMode) => void\n}\n\nconst RoiCard: React.FC<RoiCardProps> = ({ earningTokenSymbol, calculatorState, setTargetRoi, setCalculatorMode }) => {\n  const [expectedRoi, setExpectedRoi] = useState('')\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const { roiUSD, roiTokens, roiPercentage } = calculatorState.data\n  const { mode } = calculatorState.controls\n\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [mode])\n\n  const onEnterEditing = () => {\n    setCalculatorMode(CalculatorMode.PRINCIPAL_BASED_ON_ROI)\n    setExpectedRoi(\n      roiUSD.toLocaleString('en', {\n        minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\n        maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\n      }),\n    )\n  }\n\n  const onExitRoiEditing = () => {\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\n  }\n  const handleExpectedRoiChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.validity.valid) {\n      const roiAsString = event.target.value.replace(/,/g, '.')\n      setTargetRoi(roiAsString)\n      setExpectedRoi(roiAsString)\n    }\n  }\n  return (\n    <RoiCardWrapper>\n      <RoiCardInner>\n        <Text fontSize=\"12px\" color=\"secondary\" bold textTransform=\"uppercase\">\n          {t('ROI at current rates')}\n        </Text>\n        <Flex justifyContent=\"space-between\" mt=\"4px\" height=\"36px\">\n          {mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI ? (\n            <>\n              <RoiInputContainer>\n                <Input\n                  ref={inputRef}\n                  type=\"text\"\n                  inputMode=\"decimal\"\n                  pattern=\"^[0-9]+[.,]?[0-9]*$\"\n                  scale=\"sm\"\n                  value={expectedRoi}\n                  placeholder=\"0.0\"\n                  onChange={handleExpectedRoiChange}\n                />\n              </RoiInputContainer>\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onExitRoiEditing}>\n                <CheckmarkIcon color=\"primary\" />\n              </IconButton>\n            </>\n          ) : (\n            <>\n              <RoiDisplayContainer onClick={onEnterEditing}>\n                {/* Dollar sign is separate cause its not supposed to scroll with a number if number is huge */}\n                <Text fontSize=\"24px\" bold>\n                  $\n                </Text>\n                <RoiDollarAmount fontSize=\"24px\" bold fadeOut={roiUSD > TRILLION}>\n                  {roiUSD.toLocaleString('en', {\n                    minimumFractionDigits: roiUSD > MILLION ? 0 : 2,\n                    maximumFractionDigits: roiUSD > MILLION ? 0 : 2,\n                  })}\n                </RoiDollarAmount>\n              </RoiDisplayContainer>\n              <IconButton scale=\"sm\" variant=\"text\" onClick={onEnterEditing}>\n                <PencilIcon color=\"primary\" />\n              </IconButton>\n            </>\n          )}\n        </Flex>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          ~ {roiTokens} {earningTokenSymbol} (\n          {roiPercentage.toLocaleString('en', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n          %)\n        </Text>\n      </RoiCardInner>\n    </RoiCardWrapper>\n  )\n}\n\nexport default RoiCard\n","import React, { useState, useEffect } from 'react'\nimport { Flex, ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\nimport styled, { keyframes } from 'styled-components'\nimport { CalculatorMode, RoiCalculatorReducerState } from './useRoiCalculatorReducer'\n\nconst rotate = keyframes`\n  0% {\n    transform: scale(1);\n    stroke-width: 0;\n  }\n  50% {\n    transform: scale(1.3);\n    stroke-width: 2;\n  }\n  100% {\n    transform: scale(1);\n    stroke-width: 0;\n  }\n`\n\nconst ArrowContainer = styled(Flex)`\n  & > svg {\n    animation: 0.2s ${rotate} linear;\n    stroke: ${({ theme }) => `${theme.colors.primary}3D`};\n    stroke-width: 0;\n  }\n`\n\ninterface AnimatedArrowProps {\n  calculatorState: RoiCalculatorReducerState\n}\n\nconst AnimatedArrow: React.FC<AnimatedArrowProps> = ({ calculatorState }) => {\n  const [key, setKey] = useState('roiArrow-0')\n  const { mode } = calculatorState.controls\n\n  // Trigger animation on state change\n  useEffect(() => {\n    setKey((prevKey) => {\n      const prevId = parseInt(prevKey.split('-')[1], 10)\n      return `roiArrow-${prevId + 1}`\n    })\n  }, [calculatorState])\n\n  return (\n    <ArrowContainer justifyContent=\"center\" my=\"24px\" key={key}>\n      {mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL ? (\n        <ArrowDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n      ) : (\n        <ArrowUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n      )}\n    </ArrowContainer>\n  )\n}\n\nexport default AnimatedArrow\n","import React, { useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Button,\n  Flex,\n  ButtonMenu,\n  Checkbox,\n  BalanceInput,\n  HelpIcon,\n  ButtonMenuItem,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport RoiCalculatorFooter from './RoiCalculatorFooter'\nimport RoiCard from './RoiCard'\nimport useRoiCalculatorReducer, { CalculatorMode, EditingCurrency } from './useRoiCalculatorReducer'\nimport AnimatedArrow from './AnimatedArrow'\n\ninterface RoiCalculatorModalProps {\n  onDismiss?: () => void\n  onBack?: () => void\n  earningTokenPrice: number\n  apr: number\n  displayApr?: string\n  linkLabel: string\n  linkHref: string\n  stakingTokenBalance: BigNumber\n  stakingTokenSymbol: string\n  stakingTokenPrice: number\n  earningTokenSymbol?: string\n  multiplier?: string\n  autoCompoundFrequency?: number\n  performanceFee?: number\n  isFarm?: boolean\n  initialValue?: string\n}\n\nconst StyledModal = styled(Modal)`\n  width: 345px;\n  & > :nth-child(2) {\n    padding: 0;\n  }\n`\n\nconst ScrollableContainer = styled.div`\n  padding: 24px;\n  max-height: 500px;\n  overflow-y: auto;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-height: none;\n  }\n`\n\nconst FullWidthButtonMenu = styled(ButtonMenu)<{ disabled?: boolean }>`\n  width: 100%;\n\n  & > button {\n    width: 100%;\n  }\n\n  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};\n`\n\nconst RoiCalculatorModal: React.FC<RoiCalculatorModalProps> = ({\n  onDismiss,\n  onBack,\n  earningTokenPrice,\n  apr,\n  displayApr,\n  linkLabel,\n  linkHref,\n  stakingTokenBalance,\n  stakingTokenSymbol,\n  stakingTokenPrice,\n  multiplier,\n  initialValue,\n  earningTokenSymbol = 'CAKE',\n  autoCompoundFrequency = 0,\n  performanceFee = 0,\n  isFarm = false,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useActiveWeb3React()\n  const balanceInputRef = useRef<HTMLInputElement | null>(null)\n\n  const {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  } = useRoiCalculatorReducer(stakingTokenPrice, earningTokenPrice, apr, autoCompoundFrequency, performanceFee)\n\n  const { compounding, activeCompoundingIndex, stakingDuration, editingCurrency } = state.controls\n  const { principalAsUSD, principalAsToken } = state.data\n\n  // Auto-focus input on opening modal\n  useEffect(() => {\n    if (balanceInputRef.current) {\n      balanceInputRef.current.focus()\n    }\n  }, [])\n\n  // If user comes to calculator from staking modal - initialize with whatever they put in there\n  useEffect(() => {\n    if (initialValue) {\n      setPrincipalFromTokenValue(initialValue)\n    }\n  }, [initialValue, setPrincipalFromTokenValue])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    isFarm\n      ? t('“My Balance” here includes both LP Tokens in your wallet, and LP Tokens already staked in this farm.')\n      : t(\n          '“My Balance” here includes both %assetSymbol% in your wallet, and %assetSymbol% already staked in this pool.',\n          { assetSymbol: stakingTokenSymbol },\n        ),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  const onBalanceFocus = () => {\n    setCalculatorMode(CalculatorMode.ROI_BASED_ON_PRINCIPAL)\n  }\n\n  const editingUnit = editingCurrency === EditingCurrency.TOKEN ? stakingTokenSymbol : 'USD'\n  const editingValue = editingCurrency === EditingCurrency.TOKEN ? principalAsToken : principalAsUSD\n  const conversionUnit = editingCurrency === EditingCurrency.TOKEN ? 'USD' : stakingTokenSymbol\n  const conversionValue = editingCurrency === EditingCurrency.TOKEN ? principalAsUSD : principalAsToken\n  const onUserInput = editingCurrency === EditingCurrency.TOKEN ? setPrincipalFromTokenValue : setPrincipalFromUSDValue\n\n  return (\n    <StyledModal\n      title={t('ROI Calculator')}\n      onDismiss={onBack || onDismiss}\n      onBack={onBack ?? null}\n      headerBackground=\"gradients.cardHeader\"\n    >\n      <ScrollableContainer>\n        <Flex flexDirection=\"column\" mb=\"8px\">\n          <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n            {t('%asset% staked', { asset: stakingTokenSymbol })}\n          </Text>\n          <BalanceInput\n            currencyValue={`${conversionValue} ${conversionUnit}`}\n            innerRef={balanceInputRef}\n            placeholder=\"0.00\"\n            value={editingValue}\n            unit={editingUnit}\n            onUserInput={onUserInput}\n            switchEditingUnits={toggleEditingCurrency}\n            onFocus={onBalanceFocus}\n          />\n          <Flex justifyContent=\"space-between\" mt=\"8px\">\n            <Button\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"68px\"\n              variant=\"tertiary\"\n              onClick={() => setPrincipalFromUSDValue('100')}\n            >\n              $100\n            </Button>\n            <Button\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"68px\"\n              variant=\"tertiary\"\n              onClick={() => setPrincipalFromUSDValue('1000')}\n            >\n              $1000\n            </Button>\n            <Button\n              disabled={!stakingTokenBalance.isFinite() || stakingTokenBalance.lte(0) || !account}\n              scale=\"xs\"\n              p=\"4px 16px\"\n              width=\"128px\"\n              variant=\"tertiary\"\n              onClick={() =>\n                setPrincipalFromUSDValue(getBalanceNumber(stakingTokenBalance.times(stakingTokenPrice)).toString())\n              }\n            >\n              {t('My Balance').toLocaleUpperCase()}\n            </Button>\n            <span ref={targetRef}>\n              <HelpIcon width=\"16px\" height=\"16px\" color=\"textSubtle\" />\n            </span>\n            {tooltipVisible && tooltip}\n          </Flex>\n          <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n            {t('Staked for')}\n          </Text>\n          <FullWidthButtonMenu activeIndex={stakingDuration} onItemClick={setStakingDuration} scale=\"sm\">\n            <ButtonMenuItem variant=\"tertiary\">{t('1D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('7D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('30D')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('1Y')}</ButtonMenuItem>\n            <ButtonMenuItem variant=\"tertiary\">{t('5Y')}</ButtonMenuItem>\n          </FullWidthButtonMenu>\n          {autoCompoundFrequency === 0 && (\n            <>\n              <Text mt=\"24px\" color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Compounding every')}\n              </Text>\n              <Flex alignItems=\"center\">\n                <Flex flex=\"1\">\n                  <Checkbox scale=\"sm\" checked={compounding} onChange={toggleCompounding} />\n                </Flex>\n                <Flex flex=\"6\">\n                  <FullWidthButtonMenu\n                    disabled={!compounding}\n                    activeIndex={activeCompoundingIndex}\n                    onItemClick={setCompoundingFrequency}\n                    scale=\"sm\"\n                  >\n                    <ButtonMenuItem>{t('1D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('7D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('14D')}</ButtonMenuItem>\n                    <ButtonMenuItem>{t('30D')}</ButtonMenuItem>\n                  </FullWidthButtonMenu>\n                </Flex>\n              </Flex>\n            </>\n          )}\n        </Flex>\n        <AnimatedArrow calculatorState={state} />\n        <Flex>\n          <RoiCard\n            earningTokenSymbol={earningTokenSymbol}\n            calculatorState={state}\n            setTargetRoi={setTargetRoi}\n            setCalculatorMode={setCalculatorMode}\n          />\n        </Flex>\n      </ScrollableContainer>\n      <RoiCalculatorFooter\n        isFarm={isFarm}\n        apr={apr}\n        displayApr={displayApr}\n        autoCompoundFrequency={autoCompoundFrequency}\n        multiplier={multiplier}\n        linkLabel={linkLabel}\n        linkHref={linkHref}\n        performanceFee={performanceFee}\n      />\n    </StyledModal>\n  )\n}\n\nexport default RoiCalculatorModal\n","import React from 'react'\nimport {\n  TokenPairImage as UIKitTokenPairImage,\n  TokenPairImageProps as UIKitTokenPairImageProps,\n  TokenImage as UIKitTokenImage,\n  ImageProps,\n} from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { Token } from '@pancakeswap/sdk'\n\ninterface TokenPairImageProps extends Omit<UIKitTokenPairImageProps, 'primarySrc' | 'secondarySrc'> {\n  primaryToken: Token\n  secondaryToken: Token\n}\n\nconst getImageUrlFromToken = (token: Token) => {\n  const address = token.symbol === 'BNB' ? tokens.wbnb.address : token.address\n  return `/images/tokens/${address}.svg`\n}\n\nexport const TokenPairImage: React.FC<TokenPairImageProps> = ({ primaryToken, secondaryToken, ...props }) => {\n  return (\n    <UIKitTokenPairImage\n      primarySrc={getImageUrlFromToken(primaryToken)}\n      secondarySrc={getImageUrlFromToken(secondaryToken)}\n      {...props}\n    />\n  )\n}\n\ninterface TokenImageProps extends ImageProps {\n  token: Token\n}\n\nexport const TokenImage: React.FC<TokenImageProps> = ({ token, ...props }) => {\n  return <UIKitTokenImage src={getImageUrlFromToken(token)} {...props} />\n}\n"],"sourceRoot":""}
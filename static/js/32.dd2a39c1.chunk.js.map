{"version":3,"sources":["views/Ifos/components/IfoFoldableCard/types.ts","views/Ifos/components/Hero.tsx","views/Ifos/hooks/helpers.ts","views/Ifos/hooks/v2/useGetPublicIfoData.ts","views/Ifos/hooks/useIfoAllowance.ts","views/Ifos/hooks/v3/useGetWalletIfoData.ts","views/Ifos/hooks/useIfoApprove.ts","views/Ifos/components/IfoFoldableCard/Achievement.tsx","views/Pools/hooks/useWithdrawalFeeTimer.ts","utils/timeHelper.ts","views/Pools/components/CakeVaultCard/WithdrawalFeeTimer.tsx","views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx","views/Pools/components/CakeVaultCard/FeeSummary.tsx","views/Pools/components/CakeVaultCard/VaultStakeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/GetTokenModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos/components/IfoFoldableCard/Timer.tsx","views/Ifos/components/IfoFoldableCard/IfoRibbon.tsx","views/Ifos/components/IfoFoldableCard/index.tsx","views/Ifos/components/IfoLayout.tsx","views/Pools/components/PoolCard/AprRow.tsx","views/Pools/components/PoolCard/StyledCard.tsx","views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/Pools/components/PoolCard/CardFooter/index.tsx","views/Pools/components/PoolCard/PoolCardHeader.tsx","views/Pools/hooks/useApprove.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx","views/Pools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/HasSharesActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/VaultStakeActions.tsx","views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","views/Pools/components/CakeVaultCard/index.tsx","views/Pools/components/PoolsTable/ActionPanel/styles.ts","views/Pools/components/PoolCard/Modals/PercentageButton.tsx","views/Pools/hooks/useStakePool.ts","views/Pools/hooks/useUnstakePool.ts","views/Pools/components/PoolCard/Modals/StakeModal.tsx","views/Pools/components/PoolsTable/ActionPanel/Stake.tsx","views/Ifos/components/IfoPoolVaultCard.tsx","views/Ifos/components/IfoQuestions/config.ts","views/Ifos/components/IfoQuestions/index.tsx","views/Ifos/components/IfoSteps.tsx","views/Ifos/CurrentIfo.tsx","views/Ifos/hooks/v1/useGetPublicIfoData.ts","views/Ifos/hooks/v1/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV1Data.tsx","views/Ifos/hooks/v2/useGetWalletIfoData.ts","views/Ifos/components/IfoCardV2Data.tsx","views/Ifos/components/IfoCardV3Data.tsx","views/Ifos/PastIfo.tsx","views/Ifos/index.tsx","state/pools/hooks.ts","hooks/useApproveConfirmTransaction.tsx","utils/getTimePeriods.ts","components/ApproveConfirmButtons.tsx","components/FoldableSection/FoldableText.tsx","hooks/useLastUpdated.ts"],"names":["EnableStatus","StyledHero","styled","Box","theme","isDark","StyledHeading","Heading","mediaQueries","md","StyledButton","Button","colors","tertiary","primary","shadows","inset","DesktopButton","StyledSubTitle","Text","Hero","t","useTranslation","isMobile","useMatchBreakpoints","handleClick","document","getElementById","scrollIntoView","mb","py","minHeight","Container","justifyContent","flexDirection","style","gap","as","bold","onClick","variant","getStatus","currentBlock","startBlock","endBlock","TAX_PRECISION","ethers","FixedNumber","from","formatPool","pool","raisingAmountPool","BigNumber","toString","BIG_ZERO","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","cakePriceUsd","usePriceCakeBusd","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","currencyPriceInUSD","tokens","cake","useState","isInitialized","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","thresholdPoints","undefined","startBlockNum","endBlockNum","numberPoints","state","setState","fetchIfoData","useCallback","a","multicallv2","ifoV2Abi","name","params","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","divUnsafe","toUnsafeFloat","totalBlocks","prev","BSC_BLOCK_TIME","useIfoAllowance","tokenContract","spenderAddress","dependency","account","useWeb3React","allowance","setAllowance","useEffect","res","console","error","fetch","initialState","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","useGetWalletIfoData","dispatch","useAppDispatch","credit","useIfoPoolCredit","contract","useIfoV2Contract","currencyContract","useERC20","ifoCalls","map","method","fetchIfoPoolUserAndCredit","userInfo","amounts","prevState","resetIfoData","creditLeftWithNegative","minus","ifoCredit","creditLeft","maximum","setPendingTx","poolId","setIsClaimed","useIfoApprove","callWithGasPrice","useCallWithGasPrice","onTransactionSubmitted","onSuccess","onError","constants","MaxUint256","tx","wait","receipt","SmartContractIcon","props","viewBox","fill","xmlns","d","fillRule","clipRule","FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT","BIG_TEN","Flex","AchievementFlex","isFinished","InlinePrize","IfoAchievement","publicIfoData","tokenName","token","toLowerCase","campaignTitle","minLpForAchievement","formatBigNumber","div","toFixed","p","pb","alignItems","flex","src","width","height","mr","ml","color","fontSize","lineHeight","title","gt","amount","pt","pl","external","href","articleUrl","getBscScanLink","twitterUrl","telegramUrl","description","whiteSpace","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Math","floor","Date","now","currentSeconds","setCurrentSeconds","secondsRemainingCalc","doesUnstakingFeeApply","timerInterval","setInterval","prevSeconds","clearInterval","secondsToDay","s","WithdrawalFeeTimer","getTimePeriods","days","hours","minutes","day","hour","minute","UnstakingFeeCountdownRow","isTableVariant","vaultKey","useVaultPoolByKey","userData","fees","withdrawalFee","feeAsDecimal","withdrawalDayPeriod","useTooltip","fee","num","placement","targetRef","tooltip","tooltipVisible","parseInt","noFeeToPay","shouldShowTimer","withdrawalFeePeriodHour","secondsToHours","ref","small","textTransform","FeeSummary","stakingTokenSymbol","stakeAmount","feeInCake","parseFloat","hasFeeToPay","feeEndTime","getHasWithdrawFee","mt","AnnualRoiContainer","AnnualRoiDisplay","CreditEndNotice","hasEndBlockOver","useIfoPoolCreditBlock","maxWidth","VaultStakeModal","stakingMax","performanceFee","isRemovingStake","onDismiss","stakingToken","earningToken","apr","rawApr","stakingTokenPrice","earningTokenPrice","vaultPoolContract","useVaultPoolContract","pricePerFullShare","useTheme","useToast","toastSuccess","toastError","pendingTx","setStakeAmount","percent","setPercent","showRoiCalculator","setShowRoiCalculator","cakePriceBusd","usdValueStaked","times","formattedUsdValueStaked","formatNumber","callOptions","gasLimit","vaultPoolConfig","cakeAsBigNumber","convertSharesToCake","annualRoi","getInterestBreakdown","principalInUSD","isNaN","formattedAnnualRoi","getTokenLink","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","getFullDisplayBalance","decimals","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","convertCakeToShares","triggerWithdrawAllThreshold","sharesRemaining","sharesAsBigNumber","lte","Toast","txHash","hash","transactionHash","fetchCakeVaultUserData","logError","handleDeposit","handleConfirmClick","getDecimalAmount","RoiCalculatorModal","linkLabel","linkHref","stakingTokenBalance","plus","earningTokenSymbol","onBack","initialValue","headerBackground","gradients","cardHeader","VaultKey","IfoPool","minWidth","alt","value","onUserInput","input","convertedInput","pow","percentage","currencyValue","balance","min","max","onValueChanged","valueLabel","step","scale","mx","Number","isFinite","isLoading","endIcon","spin","disabled","PercentageOfTotal","userAmount","totalAmount","percentOfUserDisplay","isGreaterThan","toLocaleString","maximumFractionDigits","SkeletonCardActions","SkeletonCardTokens","SkeletonCardDetails","TokenSection","primaryToken","secondaryToken","children","TokenImage","CommitTokenSection","commitToken","equals","cakeBnbLpToken","wbnb","Label","Value","wordBreak","OnSaleInfo","saleAmount","distributionRatio","toUpperCase","ratio","MessageTextLink","Link","IfoCardTokens","walletIfoData","hasProfile","onApprove","enableStatus","publicPoolCharacteristics","userPoolCharacteristics","ifoPoolVault","useIfoPoolVault","useIfoWithApr","useModal","performanceFeeAsDecimal","onPresentStake","message","my","display","version","getBalanceNumber","fontWeight","ENABLED","IS_ENABLING","isEqualTo","textAlign","marginLeft","renderTokenSection","GetTokenModal","margin","multiplierValues","gasPrice","parseUnits","SmallAmountNotice","ContributeModal","userCurrencyBalance","setValue","raisingTokenContract","valueWithTokenDecimals","DEFAULT_TOKEN_DECIMAL","label","useApproveConfirmTransaction","onRequiresApproval","response","currentAllowance","onConfirm","PoolIds","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","maximumTokenEntry","useMemo","isLessThanOrEqualTo","maximumTokenCommittable","isWarning","getBalanceAmount","flexGrow","split","toLocaleLowerCase","onBlur","multiplierValue","index","length","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","eq","ContributeButton","useBlock","useTokenBalance","handleContributeSuccess","Promise","all","onPresentContributeModal","onPresentGetTokenModal","isMaxCommitted","isGreaterThanOrEqualTo","isDisabled","ClaimButton","ifoVersion","isPending","handleClaim","harvest","harvestPool","IfoCardActions","to","nftsBaseUrl","ConnectWalletButton","FooterEntry","MaxTokenEntry","maxToken","isCurrencyCake","isV3","tooltipContent","price","useBUSDPrice","dollarValueOfToken","multiplyPriceByAmount","IfoCardDetails","poolCharacteristic","walletCharacteristic","version3MaxTokens","maxLpTokens","isActive","totalCommittedPercent","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","pricePerTokenWithFeeToOriginalRatio","pricePerTokenWithFee","tokenOfferingPrice","tokenEntry","paddingTop","raiseAmount","cakeToBurn","StyledCard","Card","SmallCard","config","cardConfig","useProfile","isProfileLoading","GradientText","FlexGap","SoonTimer","timeUntil","position","animation","EndInHeading","LiveNowHeading","LiveTimer","BigCurve","$status","IfoRibbon","Component","$useDark","$background","overflow","IfoRibbonEnd","IfoRibbonSoon","IfoRibbonLive","$isCurrent","bubblegum","dropdown","sm","Header","CardHeader","ifoId","CardsWrapper","xxl","singleCard","StyledCardBody","CardBody","StyledCardFooter","CardFooter","backgroundAlt","StyledNoHatBunny","$isLive","lg","NoHatBunny","isLive","isCurrent","isXs","isSm","isMd","isSmallerThanTablet","IfoCurrentCard","isExpanded","setIsExpanded","shouldShowBunny","className","bottom","zIndex","id","expanded","FoldableContent","isVisible","IfoCard","fetchPublicIfoData","isPublicIfoDataInitialized","fetchWalletIfoData","resetWalletIfoData","isWalletDataInitialized","DISABLED","setEnableStatus","isRecentlyActive","fastRefresh","useFastFresh","isWindowVisible","useIsWindowVisible","checkAllowance","IfoPoolCard","IfoFoldableCard","isDesktop","borderRadius","IfoLayout","IfoLayoutWrapper","ApyLabelContainer","AprRow","stakedBalance","apyModalLink","autoCompoundFrequency","onPresentApyModal","Balance","unit","ExpandedWrapper","ExpandedFooter","totalStaked","stakingLimit","contractAddress","sousId","totalCakeInVault","vaultPools","useVaultPools","cakeInVaults","Object","values","reduce","total","vault","tokenAddress","poolContractAddress","getAddress","cakeVaultContractAddress","getVaultPoolAddress","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","hasPoolStarted","blocksToDisplay","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","gte","manualCakeTotalMinusAutoVault","getTotalStakedBalance","projectLink","BASE_BSC_SCAN_URL","registerToken","React","memo","ExpandableButtonWrapper","Footer","defaultExpanded","manualTooltipText","autoTooltipText","Wrapper","background","backgroundDisabled","radii","card","PoolCardHeaderTitle","subTitle","PoolCardHeader","isStaking","useVaultApprove","setLastUpdated","requestedApproval","setRequestedApproval","cakeContract","useCake","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","useLastUpdated","lastUpdated","checkApprovalStatus","VaultApprovalAction","StyledLink","NotEnoughTokensModal","tokenSymbol","HasSharesActions","totalShares","cakeAsNumberBalance","stakedDollarValue","onPresentTokenRequired","onPresentUnstake","totalSharesPercentage","decimalPlaces","flexWrap","prefix","VaultStakeActions","accountHasSharesStaked","InlineText","IfoVaultCardAvgBalance","creditsDollarValue","useBUSDCakeAmount","QuestionHelper","size","text","CakeVaultCardActions","RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","RecentCakeProfitCountdownRow","cakeAtLastUserAction","lastUserActionTime","getCakeVaultEarnings","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","CreditCalcBlock","creditStartBlock","creditEndBlock","CakeVaultCard","showStakedOnly","defaultFooterExpanded","isVaultUserDataLoading","tokenImage","RecentCakeProfitRow","VaultCardActions","ActionContainer","isAutoVault","xl","ActionTitles","ActionContent","PercentageButton","options","DEFAULT_GAS_LIMIT","sousStake","sousChefContract","getGasPrice","deposit","sousStakeBnb","useStakePool","isUsingBnb","masterChefContract","useMasterchef","useSousChef","handleStake","stakeFarm","updateUserStakedBalance","updateUserBalance","onStake","sousUnstake","units","withdraw","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","enableEmergencyWithdraw","handleUnstake","unstakeFarm","updateUserPendingReward","onUnstake","StakeModal","isBnbPool","hasReachedStakeLimit","setHasReachedStakedLimit","getCalculatedStakingLimit","fullDecimalStakeAmount","userNotEnoughToken","lt","IconButtonWrapper","Staked","userDataLoaded","poolCategory","lpContract","updateUserAllowance","useApprovePool","handlePoolApprove","requestedPoolApproval","handleVaultApprove","requestedVaultApproval","PoolCategory","BINANCE","isNotVaultAndHasStake","stakedTokenBalance","stakedTokenDollarBalance","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","needsApproval","onPresentVaultStake","onPresentVaultUnstake","reachStakingLimit","alignSelf","marginTop","StyledCardMobile","StyledTokenContent","invertedContrast","IfoPoolVaultCardMobile","useActiveWeb3React","userDataLoading","Stake","IfoPoolVaultCard","m","ImageWrapper","DetailsWrapper","IfoQuestions","i","FoldableText","desc","InlineLink","SmallStakePoolCard","cardBorder","Step1","creditDollarValue","Step2","isCommitted","IfoSteps","stepsValidationStatus","getStatusProp","arePreviousValid","every","slice","Boolean","renderCardBody","isStepValid","RouterLink","_","statusFirstPart","statusSecondPart","IfoStepBackground","activeIfo","ifosConfig","find","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV3Data","ifoV1Abi","raisingAmount","useIfoV1Contract","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","claimed","IfoCardV1Data","useGetPublicIfoV1Data","useGetWalletIfoV1Data","IfoCardV2Data","useGetWalletIfoV2Data","IfoCardV3Data","inactiveIfo","filter","PastIfo","Ifos","useRouteMatch","path","isExact","useFetchIfoPool","items","activeItem","exact","CurrentIfo","usePools","useSelector","pools","data","transformPool","fetchCakePool","batch","fetchCakePoolPublicDataAsync","fetchIfoPoolPublicData","fetchCakePoolUserDataAsync","fetchIfoPoolFees","useCakeVault","CakeVault","key","initialPoolVaultState","totalSharesAsString","pricePerFullShareAsString","totalCakeInVaultAsString","estimatedCakeBountyRewardAsString","estimatedCakeBountyReward","totalPendingCakeHarvestAsString","totalPendingCakeHarvest","callFee","userSharesAsString","cakeAtLastUserActionAsString","ifoPool","block","creditAsString","poolZero","usePool","getAprData","approvalState","confirmState","reducer","actions","type","noop","onApproveSuccess","useReducer","handlePreApprove","useRef","current","then","result","hasApproveFailed","hasConfirmFailed","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","abs","timeLeft","years","months","ButtonArrangement","StyledApproveConfirmButtonRow","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","StyledExpandableLabelWrapper","StyledChildrenFlex","inputSecondary","setStateLastUpdated","previousLastUpdated","usePreviousValue"],"mappings":"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","file":"static/js/32.dd2a39c1.chunk.js","sourcesContent":["export enum EnableStatus {\n  ENABLED = 'enabled',\n  DISABLED = 'disabled',\n  IS_ENABLING = 'is_enabling',\n}\n\nexport default EnableStatus\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Heading, Text, Button, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledHero = styled(Box)`\n  background-image: url('/images/ifos/assets/ifo-banner-${({ theme }) => (theme.isDark ? 'dark' : 'light')}.png');\n  background-position: top, center;\n  background-repeat: no-repeat;\n  background-size: auto 100%;\n`\n\nconst StyledHeading = styled(Heading)`\n  font-size: 40px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 64px;\n  }\n`\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.tertiary};\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 4px 13px;\n  height: auto;\n  text-transform: uppercase;\n  align-self: flex-start;\n  font-size: 12px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border-radius: 8px;\n  margin-left: 8px;\n`\n\nconst DesktopButton = styled(Button)`\n  align-self: flex-end;\n`\n\nconst StyledSubTitle = styled(Text)`\n  font-size: 16px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 20px;\n  }\n`\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  const { isMobile } = useMatchBreakpoints()\n\n  const handleClick = () => {\n    document.getElementById('ifo-how-to')?.scrollIntoView()\n  }\n\n  return (\n    <Box mb=\"8px\">\n      <StyledHero py={['16px', '16px', '32px']} minHeight={['212px', '212px', '197px']}>\n        <Container>\n          <Flex\n            justifyContent=\"space-between\"\n            flexDirection={['column', 'column', 'column', 'row']}\n            style={{ gap: '4px' }}\n          >\n            <Box>\n              <StyledHeading as=\"h1\" mb={['12px', '12px', '16px']}>\n                {t('IFO: Initial Farm Offerings')}\n              </StyledHeading>\n              <StyledSubTitle bold>\n                {t('Buy new tokens launching on Binance Smart Chain')}\n                {isMobile && <StyledButton onClick={handleClick}>{t('How does it work?')}</StyledButton>}\n              </StyledSubTitle>\n            </Box>\n            {!isMobile && (\n              <DesktopButton onClick={handleClick} variant=\"subtle\">\n                {t('How does it work?')}\n              </DesktopButton>\n            )}\n          </Flex>\n        </Container>\n      </StyledHero>\n    </Box>\n  )\n}\n\nexport default Hero\n","import { IfoStatus } from 'config/constants/types'\n\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return 'idle'\n  }\n\n  if (currentBlock < startBlock) {\n    return 'coming_soon'\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live'\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished'\n  }\n\n  return 'idle'\n}\n\nexport default null\n","import BigNumber from 'bignumber.js'\nimport { useState, useCallback } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport tokens from 'config/constants/tokens'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { ethers } from 'ethers'\nimport { useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { multicallv2 } from 'utils/multicall'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = ethers.FixedNumber.from(10000000000)\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const cakePriceUsd = usePriceCakeBusd()\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const currencyPriceInUSD = ifo.currency === tokens.cake ? cakePriceUsd : lpTokenPriceInUsd\n\n  const [state, setState] = useState({\n    isInitialized: false,\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    thresholdPoints: undefined,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n\n  const fetchIfoData = useCallback(\n    async (currentBlock: number) => {\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints, thresholdPoints] =\n        await multicallv2(ifoV2Abi, [\n          {\n            address,\n            name: 'startBlock',\n          },\n          {\n            address,\n            name: 'endBlock',\n          },\n          {\n            address,\n            name: 'viewPoolInformation',\n            params: [0],\n          },\n          {\n            address,\n            name: 'viewPoolInformation',\n            params: [1],\n          },\n          {\n            address,\n            name: 'viewPoolTaxRateOverflow',\n            params: [1],\n          },\n          {\n            address,\n            name: 'numberPoints',\n          },\n          {\n            address,\n            name: 'thresholdPoints',\n          },\n        ])\n\n      const poolBasicFormatted = formatPool(poolBasic)\n      const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n      const taxRateNum = taxRate ? ethers.FixedNumber.from(taxRate[0]).divUnsafe(TAX_PRECISION).toUnsafeFloat() : 0\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n      const totalBlocks = endBlockNum - startBlockNum\n      const blocksRemaining = endBlockNum - currentBlock\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n      setState((prev) => ({\n        ...prev,\n        isInitialized: true,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n        poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\n        status,\n        progress,\n        blocksRemaining,\n        startBlockNum,\n        endBlockNum,\n        thresholdPoints: thresholdPoints && thresholdPoints[0],\n        numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\n      }))\n    },\n    [releaseBlockNumber, address],\n  )\n\n  return { ...state, currencyPriceInUSD, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'ethers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\n// Retrieve IFO allowance\nconst useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.allowance(account, spenderAddress)\n        setAllowance(new BigNumber(res.toString()))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\nexport default useIfoAllowance\n","import { useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { useIfoPoolCredit } from 'state/pools/hooks'\nimport { fetchIfoPoolUserAndCredit } from 'state/pools'\nimport { useAppDispatch } from 'state'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\nconst initialState = {\n  isInitialized: false,\n  poolBasic: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n  },\n  poolUnlimited: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n  },\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>(initialState)\n  const dispatch = useAppDispatch()\n  const credit = useIfoPoolCredit()\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(currency.address, false)\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\n      address,\n      name: method,\n      params: [account, [0, 1]],\n    }))\n\n    dispatch(fetchIfoPoolUserAndCredit({ account }))\n\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    setState((prevState) => ({\n      ...prevState,\n      isInitialized: true,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, address, dispatch])\n\n  const resetIfoData = useCallback(() => {\n    setState({ ...initialState })\n  }, [])\n\n  const creditLeftWithNegative = credit\n    .minus(state.poolBasic.amountTokenCommittedInLP)\n    .minus(state.poolUnlimited.amountTokenCommittedInLP)\n\n  const ifoCredit = {\n    credit,\n    creditLeft: BigNumber.maximum(BIG_ZERO, creditLeftWithNegative),\n  }\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData, ifoCredit }\n}\n\nexport default useGetWalletIfoData\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\n\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const onApprove = useCallback(\n    async (\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      const tx = await callWithGasPrice(tokenContract, 'approve', [spenderAddress, ethers.constants.MaxUint256])\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n      } else {\n        onError(receipt)\n      }\n    },\n    [spenderAddress, tokenContract, callWithGasPrice],\n  )\n\n  return onApprove\n}\n\nexport default useIfoApprove\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Image,\n  Text,\n  PrizeIcon,\n  Skeleton,\n  LanguageIcon,\n  SvgProps,\n  Svg,\n  TwitterIcon,\n  Link,\n  TelegramIcon,\n} from '@pancakeswap/uikit'\nimport tokens from 'config/constants/tokens'\nimport { useTranslation } from 'contexts/Localization'\nimport { PublicIfoData } from 'views/Ifos/types'\nimport { Ifo } from 'config/constants/types'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getBscScanLink } from 'utils'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { FlexGap } from 'components/Layout/Flex'\n\nconst SmartContractIcon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <path d=\"M10.037 6a.75.75 0 000 1.5h7.5a.75.75 0 000-1.5h-7.5zM9.287 9.75a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM10.037 12a.75.75 0 000 1.5h7.5a.75.75 0 000-1.5h-7.5z\" />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M5.287 4a2 2 0 012-2h13a2 2 0 012 2v15c0 1.66-1.34 3-3 3h-14c-1.66 0-3-1.34-3-3v-2c0-.55.45-1 1-1h2V4zm0 16h11v-2h-12v1c0 .55.45 1 1 1zm14 0c.55 0 1-.45 1-1V4h-13v12h10c.55 0 1 .45 1 1v2c0 .55.45 1 1 1z\"\n      />\n    </Svg>\n  )\n}\n\nconst FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\n\ninterface Props {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n}\n\nconst Container = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  align-items: center;\n  text-align: left;\n  gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n    align-items: initial;\n  }\n`\n\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\n  text-align: left;\n`\n\nconst InlinePrize = styled(Flex)`\n  display: inline-flex;\n  vertical-align: top;\n`\n\nconst IfoAchievement: React.FC<Props> = ({ ifo, publicIfoData }) => {\n  const { t } = useTranslation()\n  const tokenName = ifo.token.symbol?.toLowerCase()\n  const campaignTitle = ifo.name\n  const minLpForAchievement = publicIfoData.thresholdPoints\n    ? formatBigNumber(publicIfoData.thresholdPoints, 3)\n    : FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT.div(publicIfoData.currencyPriceInUSD).toNumber().toFixed(3)\n\n  return (\n    <Container p=\"16px\" pb=\"32px\">\n      <AchievementFlex isFinished={publicIfoData.status === 'finished'} alignItems=\"flex-start\" flex={1}>\n        <Image src={`/images/achievements/ifo-${tokenName}.svg`} width={56} height={56} mr=\"8px\" />\n        <Flex flexDirection=\"column\" ml=\"8px\">\n          <Text color=\"secondary\" fontSize=\"12px\">\n            {`${t('Achievement')}:`}\n          </Text>\n          <Flex>\n            <Text bold mr=\"8px\" lineHeight={1.2}>\n              {t('IFO Shopper: %title%', { title: campaignTitle })}\n              <InlinePrize alignItems=\"center\" ml=\"8px\">\n                <PrizeIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\n                <Text lineHeight={1.2} color=\"textSubtle\">\n                  {publicIfoData.numberPoints}\n                </Text>\n              </InlinePrize>\n            </Text>\n          </Flex>\n          {publicIfoData.currencyPriceInUSD.gt(0) ? (\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {t('Commit ~%amount% %symbol% in total to earn!', {\n                amount: minLpForAchievement,\n                symbol: ifo.currency === tokens.cake ? 'CAKE' : 'LP',\n              })}\n            </Text>\n          ) : (\n            <Skeleton minHeight={18} width={80} />\n          )}\n          <FlexGap gap=\"16px\" pt=\"24px\" pl=\"4px\">\n            <Link external href={ifo.articleUrl}>\n              <LanguageIcon color=\"textSubtle\" />\n            </Link>\n            <Link external href={getBscScanLink(ifo.address, 'address')}>\n              <SmartContractIcon color=\"textSubtle\" />\n            </Link>\n            {ifo.twitterUrl && (\n              <Link external href={ifo.twitterUrl}>\n                <TwitterIcon color=\"textSubtle\" />\n              </Link>\n            )}\n            {ifo.telegramUrl && (\n              <Link external href={ifo.telegramUrl}>\n                <TelegramIcon color=\"textSubtle\" />\n              </Link>\n            )}\n          </FlexGap>\n        </Flex>\n      </AchievementFlex>\n      {ifo.description && (\n        <Flex alignItems=\"flex-end\" flexDirection=\"column\" flex={1}>\n          <Text fontSize=\"14px\" lineHeight={1.2} style={{ whiteSpace: 'pre-line' }}>\n            {ifo.description}\n          </Text>\n        </Flex>\n      )}\n    </Container>\n  )\n}\n\nexport default IfoAchievement\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nexport const getHasWithdrawFee = (lastDepositedTime: number, withdrawalFeePeriod = 259200) => {\n  const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n  const currentSeconds = Math.floor(Date.now() / 1000)\n  const secondsRemainingCalc = feeEndTime - currentSeconds\n  return secondsRemainingCalc > 0\n}\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n","export const secondsToDay = (s: number) => Math.floor(s / (24 * 60 * 60))\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WithdrawalFeeTimer: React.FC<{ secondsRemaining: number }> = ({ secondsRemaining }) => {\n  const { t } = useTranslation()\n  const { days, hours, minutes } = getTimePeriods(secondsRemaining)\n\n  return <Text fontSize=\"14px\">{t('%day%d : %hour%h : %minute%m', { day: days, hour: hours, minute: minutes })}</Text>\n}\n\nexport default WithdrawalFeeTimer\n","import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport { secondsToHours } from 'date-fns'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { secondsToDay } from 'utils/timeHelper'\nimport { VaultKey } from 'state/types'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n  vaultKey: VaultKey\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant, vaultKey }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useVaultPoolByKey(vaultKey)\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const withdrawalDayPeriod = withdrawalFeePeriod ? secondsToDay(withdrawalFeePeriod) : '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within %num% days of staking. Unstaking after %num% days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n          {\n            num: withdrawalDayPeriod,\n          },\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const withdrawalFeePeriodHour = withdrawalFeePeriod ? secondsToHours(withdrawalFeePeriod) : '-'\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee')\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within %num%h', { num: withdrawalFeePeriodHour })\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small textTransform=\"lowercase\">\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n","import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { VaultKey } from 'state/types'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { secondsToDay } from 'utils/timeHelper'\nimport { getHasWithdrawFee } from '../../hooks/useWithdrawalFeeTimer'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n  vaultKey: VaultKey\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount, vaultKey }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee, withdrawalFeePeriod },\n    userData: { lastDepositedTime },\n  } = useVaultPoolByKey(vaultKey)\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const withdrawalDayPeriod = withdrawalFeePeriod ? secondsToDay(withdrawalFeePeriod) : '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within %num% days of staking. Unstaking after %num% days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n          {\n            num: withdrawalDayPeriod,\n          },\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  const hasFeeToPay = lastDepositedTime && getHasWithdrawFee(parseInt(lastDepositedTime, 10), withdrawalFeePeriod)\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount && hasFeeToPay ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow vaultKey={vaultKey} />\n    </>\n  )\n}\n\nexport default FeeSummary\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  CalculateIcon,\n  IconButton,\n  Skeleton,\n  Message,\n  MessageText,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useIfoPoolCreditBlock, useVaultPoolByKey } from 'state/pools/hooks'\nimport { useVaultPoolContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { logError } from 'utils/sentry'\nimport { convertCakeToShares, convertSharesToCake } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: DeserializedPool\n  stakingMax: BigNumber\n  performanceFee?: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst CreditEndNotice = () => {\n  const { hasEndBlockOver } = useIfoPoolCreditBlock()\n  const { t } = useTranslation()\n  if (!hasEndBlockOver) return null\n  return (\n    <Box maxWidth=\"350px\">\n      <Message variant=\"warning\" mb=\"16px\">\n        <MessageText>\n          {t('The latest credit calculation period has ended. Calculation will resume upon the next period starts.')}\n        </MessageText>\n      </Message>\n    </Box>\n  )\n}\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({\n  pool,\n  stakingMax,\n  performanceFee,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken, earningToken, apr, rawApr, stakingTokenPrice, earningTokenPrice, vaultKey } = pool\n  const { account } = useWeb3React()\n  const vaultPoolContract = useVaultPoolContract(pool.vaultKey)\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useVaultPoolByKey(pool.vaultKey)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked = new BigNumber(stakeAmount).times(cakePriceBusd)\n  const formattedUsdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(usdValueStaked.toNumber()) : ''\n\n  const callOptions = {\n    gasLimit: vaultPoolConfig[pool.vaultKey].gasLimit,\n  }\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr: vaultKey ? rawApr : apr,\n    earningTokenPrice,\n    performanceFee,\n  })\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      try {\n        const tx = await callWithGasPrice(vaultPoolContract, 'withdrawAll', undefined, callOptions)\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(\n            t('Unstaked!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your earnings have also been harvested to your wallet')}\n            </ToastDescriptionWithTx>,\n          )\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await callWithGasPrice(\n          vaultPoolContract,\n          'withdraw',\n          [shareStakeToWithdraw.sharesAsBigNumber.toString()],\n          callOptions,\n        )\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(\n            t('Unstaked!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your earnings have also been harvested to your wallet')}\n            </ToastDescriptionWithTx>,\n          )\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await callWithGasPrice(vaultPoolContract, 'deposit', [convertedStakeAmount.toString()], callOptions)\n      toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Staked!'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your funds have been staked in the pool')}\n          </ToastDescriptionWithTx>,\n        )\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      }\n    } catch (error) {\n      logError(error)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount)\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        earningTokenPrice={earningTokenPrice}\n        stakingTokenPrice={stakingTokenPrice}\n        apr={vaultKey ? rawApr : apr}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={cakeAsBigNumber.plus(stakingMax)}\n        stakingTokenSymbol={stakingToken.symbol}\n        earningTokenSymbol={earningToken.symbol}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n        performanceFee={performanceFee}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {pool.vaultKey === VaultKey.IfoPool && <CreditEndNotice />}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${formattedUsdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary vaultKey={vaultKey} stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          {Number.isFinite(annualRoi) ? (\n            <AnnualRoiContainer\n              alignItems=\"center\"\n              onClick={() => {\n                setShowRoiCalculator(true)\n              }}\n            >\n              <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n              <IconButton variant=\"text\" scale=\"sm\">\n                <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n              </IconButton>\n            </AnnualRoiContainer>\n          ) : (\n            <Skeleton width={60} />\n          )}\n        </Flex>\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={getTokenLink} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PercentageOfTotalProps extends TextProps {\n  userAmount: BigNumber\n  totalAmount: BigNumber\n}\n\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\n  const { t } = useTranslation()\n  const percentOfUserContribution = totalAmount.isGreaterThan(0) ? userAmount.div(totalAmount).times(100).toNumber() : 0\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\n\n  return (\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\n      {t('%num% of total', { num: `${percentOfUserDisplay}%` })}\n    </Text>\n  )\n}\n\nexport default PercentageOfTotal\n","import React from 'react'\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\n\nexport const SkeletonCardActions = () => {\n  return <Skeleton height=\"48px\" />\n}\n\nexport const SkeletonCardTokens = () => {\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n    </div>\n  )\n}\n\nexport const SkeletonCardDetails = () => {\n  return (\n    <div>\n      <Skeleton mb=\"8px\" />\n      <Skeleton />\n    </div>\n  )\n}\n\nexport default null\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport {\n  Text,\n  Flex,\n  Box,\n  CheckmarkCircleIcon,\n  FlexProps,\n  HelpIcon,\n  useTooltip,\n  Button,\n  AutoRenewIcon,\n  BunnyPlaceholderIcon,\n  Message,\n  MessageText,\n  useModal,\n  Link,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Token } from '@pancakeswap/sdk'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { cakeBnbLpToken } from 'config/constants/ifo'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\nimport VaultStakeModal from 'views/Pools/components/CakeVaultCard/VaultStakeModal'\nimport { useIfoPoolVault, useIfoPoolCredit, useIfoWithApr } from 'state/pools/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { EnableStatus } from '../types'\nimport PercentageOfTotal from './PercentageOfTotal'\nimport { SkeletonCardTokens } from './Skeletons'\n\ninterface TokenSectionProps extends FlexProps {\n  primaryToken?: Token\n  secondaryToken?: Token\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\n  const renderTokenComponent = () => {\n    if (!primaryToken) {\n      return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\n    }\n\n    if (primaryToken && secondaryToken) {\n      return (\n        <TokenPairImage\n          variant=\"inverted\"\n          primaryToken={primaryToken}\n          height={32}\n          width={32}\n          secondaryToken={secondaryToken}\n          mr=\"16px\"\n        />\n      )\n    }\n\n    return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\n  }\n\n  return (\n    <Flex {...props}>\n      {renderTokenComponent()}\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\nconst CommitTokenSection: React.FC<TokenSectionProps & { commitToken: Token }> = ({ commitToken, ...props }) => {\n  if (commitToken.equals(cakeBnbLpToken)) {\n    return <TokenSection primaryToken={tokens.cake} secondaryToken={tokens.wbnb} {...props} />\n  }\n  return <TokenSection primaryToken={commitToken} {...props} />\n}\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  hasProfile: boolean\n  isLoading: boolean\n  onApprove: () => Promise<any>\n  enableStatus: EnableStatus\n}\n\nconst OnSaleInfo = ({ token, saleAmount, distributionRatio }) => {\n  const { t } = useTranslation()\n  return (\n    <TokenSection primaryToken={token}>\n      <Flex flexDirection=\"column\">\n        <Label>{t('On sale').toUpperCase()}</Label>\n        <Value>{saleAmount}</Value>\n        <Text fontSize=\"14px\" color=\"textSubtle\">\n          {t('%ratio%% of total sale', { ratio: distributionRatio })}\n        </Text>\n      </Flex>\n    </TokenSection>\n  )\n}\n\nconst MessageTextLink = styled(Link)`\n  display: inline;\n  text-decoration: underline;\n  font-weight: bold;\n  font-size: 14px;\n  white-space: nowrap;\n`\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  hasProfile,\n  isLoading,\n  onApprove,\n  enableStatus,\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\n      'Sorry, you didn’t contribute enough CAKE to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your CAKE.',\n    ),\n    { placement: 'bottom' },\n  )\n\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency, token } = ifo\n  const { hasClaimed } = userPoolCharacteristics\n  const distributionRatio = ifo[poolId].distributionRatio * 100\n\n  const ifoPoolVault = useIfoPoolVault()\n  const { pool } = useIfoWithApr()\n  const credit = useIfoPoolCredit()\n\n  const stakingTokenBalance = pool?.userData?.stakingTokenBalance\n    ? new BigNumber(pool.userData.stakingTokenBalance)\n    : BIG_ZERO\n\n  const [onPresentStake] = useModal(\n    <VaultStakeModal\n      stakingMax={stakingTokenBalance}\n      performanceFee={ifoPoolVault.fees.performanceFeeAsDecimal}\n      pool={pool}\n    />,\n  )\n\n  const renderTokenSection = () => {\n    if (isLoading) {\n      return <SkeletonCardTokens />\n    }\n    if (!account) {\n      return <OnSaleInfo token={token} distributionRatio={distributionRatio} saleAmount={ifo[poolId].saleAmount} />\n    }\n\n    let message\n\n    if (account && !hasProfile) {\n      message = (\n        <Message my=\"24px\" p=\"8px\" variant=\"warning\">\n          <Box>\n            <MessageText display=\"inline\">\n              {publicIfoData.status === 'finished'\n                ? t('Activate PancakeSwap Profile to take part in next IFO‘s!')\n                : t('You need an active PancakeSwap Profile to take part in an IFO!')}\n            </MessageText>{' '}\n            <MessageTextLink href=\"#ifo-how-to\" color=\"#D67E0A\" display=\"inline\">\n              {t('How does it work?')} »\n            </MessageTextLink>\n          </Box>\n        </Message>\n      )\n    }\n\n    if (ifo.version === 3 && getBalanceNumber(credit) === 0) {\n      message = (\n        <Message my=\"24px\" p=\"8px\" variant=\"danger\">\n          <Box>\n            <MessageText display=\"inline\">\n              {t('You don’t have any average CAKE balance available to commit in the IFO CAKE pool.')}\n            </MessageText>{' '}\n            <MessageTextLink display=\"inline\" fontWeight={700} href=\"#ifo-how-to\" color=\"failure\">\n              {t('How does it work?')} »\n            </MessageTextLink>\n          </Box>\n        </Message>\n      )\n    }\n    if (account && !hasProfile) {\n      return (\n        <>\n          <OnSaleInfo token={token} distributionRatio={distributionRatio} saleAmount={ifo[poolId].saleAmount} />\n          {message}\n        </>\n      )\n    }\n    if (publicIfoData.status === 'coming_soon') {\n      return (\n        <>\n          <TokenSection primaryToken={ifo.token}>\n            <Label>{t('On sale')}</Label>\n            <Value>{ifo[poolId].saleAmount}</Value>\n          </TokenSection>\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\n            {t('%ratio%% of total sale', { ratio: distributionRatio })}\n          </Text>\n          {message}\n          {enableStatus !== EnableStatus.ENABLED && account && (\n            <Button\n              width=\"100%\"\n              mt=\"16px\"\n              onClick={onApprove}\n              isLoading={enableStatus === EnableStatus.IS_ENABLING}\n              endIcon={enableStatus === EnableStatus.IS_ENABLING ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            >\n              {t('Enable')}\n            </Button>\n          )}\n        </>\n      )\n    }\n    if (publicIfoData.status === 'live') {\n      return (\n        <>\n          <CommitTokenSection commitToken={ifo.currency} mb=\"24px\">\n            <Label>{t('Your %symbol% committed', { symbol: currency.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </CommitTokenSection>\n          <TokenSection primaryToken={ifo.token}>\n            <Label>{t('%symbol% to receive', { symbol: token.symbol })}</Label>\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n          </TokenSection>\n        </>\n      )\n    }\n    if (publicIfoData.status === 'finished') {\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          <BunnyPlaceholderIcon width={80} mb=\"16px\" />\n          <Text fontWeight={600}>{t('You didn’t participate in this sale!')}</Text>\n          <Text textAlign=\"center\" fontSize=\"14px\">\n            {t('To participate in the next IFO, stake some CAKE in the IFO CAKE pool!')}\n          </Text>\n          <MessageTextLink href=\"#ifo-how-to\" textAlign=\"center\">\n            {t('How does it work?')} »\n          </MessageTextLink>\n          <Button mt=\"24px\" onClick={onPresentStake}>\n            {t('Stake CAKE in IFO pool')}\n          </Button>\n        </Flex>\n      ) : (\n        <>\n          <CommitTokenSection commitToken={ifo.currency} mb=\"24px\">\n            <Label>\n              {t(hasClaimed ? 'Your %symbol% RECLAIMED' : 'Your %symbol% TO RECLAIM', { symbol: currency.symbol })}\n            </Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n            <PercentageOfTotal\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\n            />\n          </CommitTokenSection>\n          <TokenSection primaryToken={ifo.token}>\n            <Label> {t(hasClaimed ? '%symbol% received' : '%symbol% to receive', { symbol: token.symbol })}</Label>\n            <Flex alignItems=\"center\">\n              <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\n                  <HelpIcon />\n                </div>\n              )}\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\n            </Flex>\n          </TokenSection>\n          {hasClaimed && (\n            <Message my=\"24px\" p=\"8px\" variant=\"success\">\n              <MessageText>{t('You’ve successfully claimed tokens back.')}</MessageText>\n            </Message>\n          )}\n        </>\n      )\n    }\n    return null\n  }\n  return (\n    <Box>\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","import React from 'react'\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props {\n  currency: Token\n  onDismiss?: () => void\n}\n\nconst GetTokenModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal title={t('%symbol% required', { symbol: currency.symbol })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"288px\">\n        <Image src={`/images/tokens/${currency.address}.svg`} width={72} height={72} margin=\"auto\" mb=\"24px\" />\n        <Text mb=\"16px\">\n          {t('You’ll need %symbol% tokens to participate in the IFO!', { symbol: currency.symbol })}\n        </Text>\n        <Text mb=\"24px\">\n          {t('Get %symbol%, or make sure your tokens aren’t staked somewhere else.', { symbol: currency.symbol })}\n        </Text>\n        <Button\n          as={Link}\n          external\n          href={`/swap?outputCurrency=${currency.address}`}\n          endIcon={<OpenNewIcon color=\"white\" />}\n          minWidth=\"100%\" // Bypass the width=\"fit-content\" on Links\n        >\n          {t('Get %symbol%', { symbol: currency.symbol })}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default GetTokenModal\n","import React, { useMemo, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport {\n  Modal,\n  ModalBody,\n  Text,\n  Image,\n  Button,\n  BalanceInput,\n  Flex,\n  useTooltip,\n  TooltipText,\n  Box,\n  Link,\n  Message,\n  MessageText,\n} from '@pancakeswap/uikit'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20 } from 'hooks/useContract'\nimport tokens from 'config/constants/tokens'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  userCurrencyBalance: BigNumber\n  creditLeft: BigNumber\n  onSuccess: (amount: BigNumber, txHash: string) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = parseUnits('10', 'gwei').toString()\n\nconst SmallAmountNotice: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box maxWidth=\"350px\">\n      <Message variant=\"warning\" mb=\"16px\">\n        <MessageText>\n          {t('If the amount you commit is too small, you may not receive a meaningful amount of IFO tokens.')}\n        </MessageText>\n      </Message>\n    </Box>\n  )\n}\n\nconst ContributeModal: React.FC<Props> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  creditLeft,\n  onDismiss,\n  onSuccess,\n}) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency } = ifo\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\n  const { contract } = walletIfoData\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const raisingTokenContract = useERC20(currency.address)\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\n  const label = currency === tokens.cake ? t('Max. CAKE entry') : t('Max. token entry')\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await raisingTokenContract.allowance(account, contract.address)\n          const currentAllowance = new BigNumber(response.toString())\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(raisingTokenContract, 'approve', [contract.address, ethers.constants.MaxUint256], {\n          gasPrice,\n        })\n      },\n      onConfirm: () => {\n        return callWithGasPrice(\n          contract,\n          'depositPool',\n          [valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1],\n          {\n            gasPrice,\n          },\n        )\n      },\n      onSuccess: async ({ receipt }) => {\n        await onSuccess(valueWithTokenDecimals, receipt.transactionHash)\n        onDismiss()\n      },\n    })\n\n  // in v3 max token entry is based on ifo credit and hard cap limit per user minus amount already committed\n  const maximumTokenEntry = useMemo(() => {\n    if (!creditLeft) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP)\n    }\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      if (limitPerUserInLP.isGreaterThan(0)) {\n        return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(creditLeft)\n          ? limitPerUserInLP.minus(amountTokenCommittedInLP)\n          : creditLeft\n      }\n    }\n    return creditLeft\n  }, [creditLeft, limitPerUserInLP, amountTokenCommittedInLP])\n\n  // include user balance for input\n  const maximumTokenCommittable = useMemo(() => {\n    return maximumTokenEntry.isLessThanOrEqualTo(userCurrencyBalance) ? maximumTokenEntry : userCurrencyBalance\n  }, [maximumTokenEntry, userCurrencyBalance])\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    poolId === PoolIds.poolBasic\n      ? t(\n          'For the basic sale, Max CAKE entry is capped by minimum between your average CAKE balance in the IFO CAKE pool, or the pool’s hard cap. To increase the max entry, Stake more CAKE into the IFO CAKE pool',\n        )\n      : t(\n          'For the unlimited sale, Max CAKE entry is capped by your average CAKE balance in the IFO CAKE pool. To increase the max entry, Stake more CAKE into the IFO CAKE pool',\n        ),\n    {},\n  )\n\n  const isWarning =\n    valueWithTokenDecimals.isGreaterThan(userCurrencyBalance) || valueWithTokenDecimals.isGreaterThan(maximumTokenEntry)\n\n  return (\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"360px\">\n        {poolId === PoolIds.poolUnlimited && <SmallAmountNotice />}\n        <Box p=\"2px\">\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\n            {tooltipVisible && tooltip}\n            <TooltipText ref={targetRef}>{label}:</TooltipText>\n            <Text>{`${formatNumber(getBalanceAmount(maximumTokenEntry, currency.decimals).toNumber(), 3, 3)} ${\n              ifo.currency.symbol\n            }`}</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\" mb=\"8px\">\n            <Text>{t('Commit')}:</Text>\n            <Flex flexGrow={1} justifyContent=\"flex-end\">\n              <Image\n                src={\n                  ifo.currency.symbol === 'CAKE'\n                    ? '/images/cake.svg'\n                    : `/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`\n                }\n                width={24}\n                height={24}\n              />\n              <Text ml=\"4px\">{currency.symbol}</Text>\n            </Flex>\n          </Flex>\n          <BalanceInput\n            value={value}\n            currencyValue={`${publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)} USD`}\n            onUserInput={setValue}\n            isWarning={isWarning}\n            decimals={currency.decimals}\n            onBlur={() => {\n              if (isWarning) {\n                // auto adjust to max value\n                setValue(getBalanceAmount(maximumTokenCommittable).toString())\n              }\n            }}\n            mb=\"8px\"\n          />\n          {isWarning && (\n            <Text\n              color={valueWithTokenDecimals.isGreaterThan(userCurrencyBalance) ? 'failure' : 'warning'}\n              textAlign=\"right\"\n              fontSize=\"12px\"\n              mb=\"8px\"\n            >\n              {valueWithTokenDecimals.isGreaterThan(userCurrencyBalance)\n                ? t('Insufficient Balance')\n                : t('Exceeded max CAKE entry')}\n            </Text>\n          )}\n          <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n            {t('Balance: %balance%', {\n              balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\n            })}\n          </Text>\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\n            {multiplierValues.map((multiplierValue, index) => (\n              <Button\n                key={multiplierValue}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={() => setValue(getBalanceAmount(maximumTokenCommittable.times(multiplierValue)).toString())}\n                mr={index < multiplierValues.length - 1 ? '8px' : 0}\n              >\n                {multiplierValue * 100}%\n              </Button>\n            ))}\n          </Flex>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n            {t(\n              'If you don’t commit enough CAKE, you may not receive any IFO tokens at all and will only receive a full refund of your CAKE.',\n            )}\n            <Link\n              fontSize=\"12px\"\n              display=\"inline\"\n              href=\"https://docs.pancakeswap.finance/products/ifo-initial-farm-offering\"\n              external\n            >\n              {t('Read more')}\n            </Link>\n          </Text>\n          <ApproveConfirmButtons\n            isApproveDisabled={isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={\n              !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0) || isWarning\n            }\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </Box>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n","import React from 'react'\nimport { useBlock } from 'state/block/hooks'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport GetTokenModal from './GetTokenModal'\nimport ContributeModal from './ContributeModal'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { currentBlock } = useBlock()\n  const { balance: userCurrencyBalance } = useTokenBalance(ifo.currency.address)\n\n  // Refetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber, txHash: string) => {\n    await Promise.all([publicIfoData.fetchIfoData(currentBlock), walletIfoData.fetchIfoData()])\n    toastSuccess(\n      t('Success!'),\n      <ToastDescriptionWithTx txHash={txHash}>\n        {t('You have contributed %amount% CAKE to this IFO!', {\n          amount: getBalanceNumber(amount),\n        })}\n      </ToastDescriptionWithTx>,\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModal\n      poolId={poolId}\n      creditLeft={walletIfoData.ifoCredit?.creditLeft}\n      ifo={ifo}\n      publicIfoData={publicIfoData}\n      walletIfoData={walletIfoData}\n      onSuccess={handleContributeSuccess}\n      userCurrencyBalance={userCurrencyBalance}\n    />,\n    false,\n  )\n\n  const [onPresentGetTokenModal] = useModal(<GetTokenModal currency={ifo.currency} />, false)\n\n  const isMaxCommitted =\n    (walletIfoData.ifoCredit?.creditLeft && walletIfoData.ifoCredit?.creditLeft.isLessThanOrEqualTo(0)) ||\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\n\n  const isDisabled = isPendingTx || isMaxCommitted || publicIfoData.status !== 'live'\n\n  return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetTokenModal : onPresentContributeModal}\n      width=\"100%\"\n      disabled={isDisabled}\n    >\n      {isMaxCommitted && publicIfoData.status === 'live' ? t('Max. Committed') : t('Commit CAKE')}\n    </Button>\n  )\n}\n\nexport default ContributeButton\n","import React from 'react'\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { logError } from 'utils/sentry'\n\ninterface Props {\n  poolId: PoolIds\n  ifoVersion: number\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n      const tx =\n        ifoVersion === 1\n          ? await walletIfoData.contract.harvest()\n          : await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\n      toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      const receipt = await tx.wait()\n      const txHash = receipt.transactionHash\n\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess(\n        t('Success!'),\n        <ToastDescriptionWithTx txHash={txHash}>\n          {t('You have successfully claimed your rewards.')}\n        </ToastDescriptionWithTx>,\n      )\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      logError(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {t('Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ContributeButton from './ContributeButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  hasProfile: boolean\n  isLoading: boolean\n}\n\nconst IfoCardActions: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData, hasProfile, isLoading }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  if (isLoading) {\n    return <SkeletonCardActions />\n  }\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  if (!hasProfile) {\n    return (\n      <Button as={Link} to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} width=\"100%\">\n        {t('Activate your Profile')}\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      {(publicIfoData.status === 'live' || publicIfoData.status === 'coming_soon') && (\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n      )}\n      {publicIfoData.status === 'finished' &&\n        !userPoolCharacteristics.hasClaimed &&\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\n          <ClaimButton poolId={poolId} ifoVersion={ifo.version} walletIfoData={walletIfoData} />\n        )}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","import React, { ReactNode } from 'react'\nimport tokens from 'config/constants/tokens'\nimport { Text, Flex, Box, Skeleton, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { SkeletonCardDetails } from './Skeletons'\n\nexport interface IfoCardDetailsProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}\n\nexport interface FooterEntryProps {\n  label: ReactNode\n  value: ReactNode\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      {value ? (\n        <Text small textAlign=\"right\">\n          {value}\n        </Text>\n      ) : (\n        <Skeleton height={21} width={80} />\n      )}\n    </Flex>\n  )\n}\n\nconst MaxTokenEntry = ({ maxToken, ifo, poolId }: { maxToken: number; ifo: Ifo; poolId: PoolIds }) => {\n  const isCurrencyCake = ifo.currency === tokens.cake\n  const isV3 = ifo.version === 3\n  const { t } = useTranslation()\n\n  const tooltipContent =\n    poolId === PoolIds.poolBasic\n      ? t(\n          'For the basic sale, Max CAKE entry is capped by minimum between your average CAKE balance in the IFO CAKE pool, or the pool’s hard cap. To increase the max entry, Stake more CAKE into the IFO CAKE pool',\n        )\n      : t(\n          'For the unlimited sale, Max CAKE entry is capped by your average CAKE balance in the IFO CAKE pool. To increase the max entry, Stake more CAKE into the IFO CAKE pool',\n        )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n  const label = isCurrencyCake ? t('Max. CAKE entry') : t('Max. token entry')\n  const price = useBUSDPrice(ifo.currency)\n\n  const dollarValueOfToken = multiplyPriceByAmount(price, maxToken, ifo.currency.decimals)\n\n  return (\n    <>\n      {isV3 && tooltipVisible && tooltip}\n      <FooterEntry\n        label={\n          isV3 ? (\n            <TooltipText small color=\"textSubtle\" ref={targetRef}>\n              {label}\n            </TooltipText>\n          ) : (\n            label\n          )\n        }\n        value={\n          <Text small textAlign=\"right\" color={maxToken > 0 ? 'text' : 'failure'}>\n            {`${formatNumber(maxToken, 3, 3)} ${\n              !isCurrencyCake ? ifo.currency.symbol : ''\n            } ${` ~($${dollarValueOfToken.toFixed(0)})`}`}\n          </Text>\n        }\n      />\n    </>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\n  const { t } = useTranslation()\n  const { status, currencyPriceInUSD } = publicIfoData\n  const poolCharacteristic = publicIfoData[poolId]\n  const walletCharacteristic = walletIfoData[poolId]\n\n  let version3MaxTokens = walletIfoData.ifoCredit?.creditLeft\n    ? // if creditLeft > limit show limit else show creditLeft\n      walletIfoData.ifoCredit.creditLeft.gt(\n        poolCharacteristic.limitPerUserInLP.minus(walletCharacteristic.amountTokenCommittedInLP),\n      )\n      ? poolCharacteristic.limitPerUserInLP.minus(walletCharacteristic.amountTokenCommittedInLP)\n      : walletIfoData.ifoCredit.creditLeft\n    : null\n\n  // unlimited pool just show the credit left\n  version3MaxTokens = poolId === PoolIds.poolUnlimited ? walletIfoData.ifoCredit?.creditLeft : version3MaxTokens\n\n  /* Format start */\n  const maxLpTokens =\n    ifo.version === 3 && ifo.isActive\n      ? version3MaxTokens\n        ? getBalanceNumber(version3MaxTokens, ifo.currency.decimals)\n        : 0\n      : getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\n  const taxRate = `${poolCharacteristic.taxRate}%`\n\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\n    .div(poolCharacteristic.raisingAmountPool)\n    .times(100)\n    .toFixed(2)\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\n\n  const sumTaxesOverflow = poolCharacteristic.totalAmountPool.times(poolCharacteristic.taxRate).times(0.01)\n  const pricePerTokenWithFeeToOriginalRatio = sumTaxesOverflow\n    .plus(poolCharacteristic.raisingAmountPool)\n    .div(poolCharacteristic.offeringAmountPool)\n    .div(poolCharacteristic.raisingAmountPool.div(poolCharacteristic.offeringAmountPool))\n  const pricePerTokenWithFee = `~$${formatNumber(\n    pricePerTokenWithFeeToOriginalRatio.times(ifo.tokenOfferingPrice).toNumber(),\n    0,\n    2,\n  )}`\n\n  const tokenEntry = <MaxTokenEntry poolId={poolId} ifo={ifo} maxToken={maxLpTokens} />\n\n  /* Format end */\n  const renderBasedOnIfoStatus = () => {\n    if (status === 'coming_soon') {\n      return (\n        <>\n          {tokenEntry}\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          {ifo[poolId].cakeToBurn !== '$0' && <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />}\n          <FooterEntry\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n            value={`$${ifo.tokenOfferingPrice}`}\n          />\n        </>\n      )\n    }\n    if (status === 'live') {\n      return (\n        <>\n          {tokenEntry}\n          {poolId === PoolIds.poolBasic && (\n            <FooterEntry\n              label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n              value={`$${ifo.tokenOfferingPrice}`}\n            />\n          )}\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\n          {poolId === PoolIds.poolUnlimited && (\n            <FooterEntry\n              label={t('Price per %symbol% with fee:', { symbol: ifo.token.symbol })}\n              value={pricePerTokenWithFee}\n            />\n          )}\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\n        </>\n      )\n    }\n    if (status === 'finished') {\n      return (\n        <>\n          {(poolId === PoolIds.poolBasic || ifo.isActive) && tokenEntry}\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\n          {ifo[poolId].cakeToBurn !== '$0' && <FooterEntry label={t('CAKE to burn:')} value={ifo[poolId].cakeToBurn} />}\n          {ifo.version > 1 && (\n            <FooterEntry\n              label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\n              value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\n            />\n          )}\n          {ifo.version > 1 && poolId === PoolIds.poolUnlimited && (\n            <FooterEntry\n              label={t('Price per %symbol% with fee:', { symbol: ifo.token.symbol })}\n              value={pricePerTokenWithFee}\n            />\n          )}\n        </>\n      )\n    }\n    return <SkeletonCardDetails />\n  }\n\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\n}\n\nexport default IfoCardDetails\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { Box, Card, CardBody, CardHeader, Flex, HelpIcon, Text, useTooltip } from '@pancakeswap/uikit'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport { EnableStatus } from '../types'\nimport IfoCardTokens from './IfoCardTokens'\nimport IfoCardActions from './IfoCardActions'\nimport IfoCardDetails from './IfoCardDetails'\n\nconst StyledCard = styled(Card)`\n  background: none;\n  max-width: 368px;\n  width: 100%;\n  margin: 0 auto;\n  height: fit-content;\n`\n\ninterface IfoCardProps {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  onApprove: () => Promise<any>\n  enableStatus: EnableStatus\n}\n\nconst cardConfig = (\n  t: ContextApi['t'],\n  poolId: PoolIds,\n): {\n  title: string\n  variant: 'blue' | 'violet'\n  tooltip: string\n} => {\n  switch (poolId) {\n    case PoolIds.poolBasic:\n      return {\n        title: t('Basic Sale'),\n        variant: 'blue',\n        tooltip: t(\n          'Every person can only commit a limited amount, but may expect a higher return per token committed.',\n        ),\n      }\n    case PoolIds.poolUnlimited:\n      return {\n        title: t('Unlimited Sale'),\n        variant: 'violet',\n        tooltip: t('No limits on the amount you can commit. Additional fee applies when claiming.'),\n      }\n    default:\n      return { title: '', variant: 'blue', tooltip: '' }\n  }\n}\n\nconst SmallCard: React.FC<IfoCardProps> = ({ poolId, ifo, publicIfoData, walletIfoData, onApprove, enableStatus }) => {\n  const { t } = useTranslation()\n  const config = cardConfig(t, poolId)\n  const { hasProfile, isLoading: isProfileLoading } = useProfile()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(config.tooltip, { placement: 'bottom' })\n\n  const isLoading = isProfileLoading || publicIfoData.status === 'idle'\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <StyledCard>\n        <CardHeader p=\"16px 24px\" variant={config.variant}>\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text bold fontSize=\"20px\" lineHeight={1}>\n              {config.title}\n            </Text>\n            <div ref={targetRef}>\n              <HelpIcon />\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody p=\"12px\">\n          <IfoCardTokens\n            poolId={poolId}\n            ifo={ifo}\n            publicIfoData={publicIfoData}\n            walletIfoData={walletIfoData}\n            hasProfile={hasProfile}\n            isLoading={isLoading}\n            onApprove={onApprove}\n            enableStatus={enableStatus}\n          />\n          <Box mt=\"24px\">\n            <IfoCardActions\n              poolId={poolId}\n              ifo={ifo}\n              publicIfoData={publicIfoData}\n              walletIfoData={walletIfoData}\n              hasProfile={hasProfile}\n              isLoading={isLoading}\n            />\n          </Box>\n          <IfoCardDetails poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n        </CardBody>\n      </StyledCard>\n    </>\n  )\n}\n\nexport default SmallCard\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Flex, Heading, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData } from 'views/Ifos/types'\n\ninterface Props {\n  publicIfoData: PublicIfoData\n}\n\nconst GradientText = styled(Heading)`\n  background: -webkit-linear-gradient(#ffd800, #eb8c00);\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);\n`\n\nconst FlexGap = styled(Flex)<{ gap: string }>`\n  gap: ${({ gap }) => gap};\n`\n\nexport const SoonTimer: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status, secondsUntilStart } = publicIfoData\n  const timeUntil = getTimePeriods(secondsUntilStart)\n  return (\n    <Flex justifyContent=\"center\" position=\"relative\">\n      {status === 'idle' ? (\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\n      ) : (\n        <>\n          <FlexGap gap=\"8px\" alignItems=\"center\">\n            <Heading as=\"h3\" scale=\"lg\" color=\"secondary\">\n              {t('Start in')}\n            </Heading>\n            <FlexGap gap=\"4px\" alignItems=\"baseline\">\n              {timeUntil.days ? (\n                <>\n                  <Heading scale=\"lg\" color=\"secondary\">\n                    {timeUntil.days}\n                  </Heading>\n                  <Text color=\"secondary\">{t('d')}</Text>\n                </>\n              ) : null}\n              {timeUntil.days || timeUntil.hours ? (\n                <>\n                  <Heading color=\"secondary\" scale=\"lg\">\n                    {timeUntil.hours}\n                  </Heading>\n                  <Text color=\"secondary\">{t('h')}</Text>\n                </>\n              ) : null}\n              <>\n                <Heading color=\"secondary\" scale=\"lg\">\n                  {timeUntil.minutes}\n                </Heading>\n                <Text color=\"secondary\">{t('m')}</Text>\n              </>\n            </FlexGap>\n          </FlexGap>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nconst EndInHeading = styled(Heading)`\n  color: white;\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 1.1;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 24px;\n  }\n`\n\nconst LiveNowHeading = styled(EndInHeading)`\n  color: white;\n  ${({ theme }) => theme.mediaQueries.md} {\n    background: -webkit-linear-gradient(#ffd800, #eb8c00);\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);\n  }\n`\n\nconst LiveTimer: React.FC<Props> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  const { status, secondsUntilEnd } = publicIfoData\n  const timeUntil = getTimePeriods(secondsUntilEnd)\n  return (\n    <Flex justifyContent=\"center\" position=\"relative\">\n      {status === 'idle' ? (\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\n      ) : (\n        <>\n          <PocketWatchIcon width=\"42px\" mr=\"8px\" />\n          <FlexGap gap=\"8px\" alignItems=\"center\">\n            <LiveNowHeading as=\"h3\">{`${t('Live Now').toUpperCase()}!`}</LiveNowHeading>\n            <EndInHeading as=\"h3\" scale=\"lg\" color=\"white\">\n              {t('Ends in')}\n            </EndInHeading>\n            <FlexGap gap=\"4px\" alignItems=\"baseline\">\n              {timeUntil.days ? (\n                <>\n                  <GradientText scale=\"lg\">{timeUntil.days}</GradientText>\n                  <Text color=\"white\">{t('d')}</Text>\n                </>\n              ) : null}\n              {timeUntil.days || timeUntil.hours ? (\n                <>\n                  <GradientText scale=\"lg\">{timeUntil.hours}</GradientText>\n                  <Text color=\"white\">{t('h')}</Text>\n                </>\n              ) : null}\n              <>\n                <GradientText scale=\"lg\">{timeUntil.minutes}</GradientText>\n                <Text color=\"white\">{t('m')}</Text>\n              </>\n            </FlexGap>\n          </FlexGap>\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default LiveTimer\n","import { Box, Flex, Heading, Progress, ProgressBar } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { PublicIfoData } from '../../types'\nimport LiveTimer, { SoonTimer } from './Timer'\n\nconst BigCurve = styled(Box)<{ $status: PublicIfoData['status'] }>`\n  width: 150%;\n  position: absolute;\n  top: -150%;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    border-radius: 50%;\n  }\n\n  ${({ $status, theme }) => {\n    switch ($status) {\n      case 'coming_soon':\n        return `\n          background: ${theme.colors.tertiary};\n        `\n      case 'live':\n        return `\n          background: linear-gradient(#8051D6 100%, #492286 100%);\n        `\n      case 'finished':\n        return `\n          background: ${theme.colors.input};\n        `\n      default:\n        return ''\n    }\n  }}\n`\n\nexport const IfoRibbon = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\n  const { status } = publicIfoData\n\n  let Component\n  if (status === 'finished') {\n    Component = <IfoRibbonEnd />\n  } else if (status === 'live') {\n    Component = <IfoRibbonLive publicIfoData={publicIfoData} />\n  } else if (status === 'coming_soon') {\n    Component = <IfoRibbonSoon publicIfoData={publicIfoData} />\n  }\n\n  if (status === 'idle') {\n    return null\n  }\n\n  return (\n    <>\n      {status === 'live' && (\n        <Progress variant=\"flat\">\n          <ProgressBar\n            $useDark\n            $background=\"linear-gradient(273deg, #ffd800 -2.87%, #eb8c00 113.73%)\"\n            style={{ width: `${Math.min(Math.max(publicIfoData.progress, 0), 100)}%` }}\n          />\n        </Progress>\n      )}\n      <Flex\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n        minHeight={['48px', '48px', '48px', '75px']}\n        position=\"relative\"\n        overflow=\"hidden\"\n      >\n        {Component}\n      </Flex>\n    </>\n  )\n}\n\nconst IfoRibbonEnd = () => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <BigCurve $status=\"finished\" />\n      <Box position=\"relative\">\n        <Heading as=\"h3\" scale=\"lg\" color=\"textSubtle\">\n          {t('Sale Finished!')}\n        </Heading>\n      </Box>\n    </>\n  )\n}\n\nconst IfoRibbonSoon = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\n  return (\n    <>\n      <BigCurve $status=\"coming_soon\" />\n      <Box position=\"relative\">\n        <Heading as=\"h3\" scale=\"lg\" color=\"secondary\">\n          <SoonTimer publicIfoData={publicIfoData} />\n        </Heading>\n      </Box>\n    </>\n  )\n}\n\nconst IfoRibbonLive = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\n  return (\n    <>\n      <BigCurve $status=\"live\" />\n      <Box position=\"relative\">\n        <LiveTimer publicIfoData={publicIfoData} />\n      </Box>\n    </>\n  )\n}\n","import {\n  Box,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  ExpandableLabel,\n  ExpandableButton,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { useFastFresh } from 'hooks/useRefresh'\nimport useToast from 'hooks/useToast'\nimport React, { useEffect, useState } from 'react'\nimport { useBlock } from 'state/block/hooks'\nimport styled from 'styled-components'\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\nimport useIsWindowVisible from '../../../../hooks/useIsWindowVisible'\nimport useIfoApprove from '../../hooks/useIfoApprove'\nimport IfoAchievement from './Achievement'\nimport IfoPoolCard from './IfoPoolCard'\nimport { EnableStatus } from './types'\nimport { IfoRibbon } from './IfoRibbon'\n\ninterface IfoFoldableCardProps {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}\n\nconst StyledCard = styled(Card)<{ $isCurrent?: boolean }>`\n  width: 100%;\n  margin: auto;\n  border-top-left-radius: 32px;\n  border-top-right-radius: 32px;\n\n  ${({ $isCurrent }) =>\n    $isCurrent &&\n    `\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  > div {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n  `}\n\n  > div {\n    background: ${({ theme, $isCurrent }) => ($isCurrent ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    border-top-left-radius: 32px;\n    border-top-right-radius: 32px;\n\n    > div {\n      border-top-left-radius: 32px;\n      border-top-right-radius: 32px;\n    }\n  }\n`\n\nconst Header = styled(CardHeader)<{ ifoId: string; $isCurrent?: boolean }>`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: ${({ $isCurrent }) => ($isCurrent ? '64px' : '112px')};\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  border-top-left-radius: 32px;\n  border-top-right-radius: 32px;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.svg'), url('/images/ifos/${ifoId}-bg.png')`};\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 112px;\n  }\n`\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  padding: 24px 16px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 24px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  padding: 0;\n  background: ${({ theme }) => theme.colors.backgroundAlt};\n  text-align: center;\n`\n\nconst StyledNoHatBunny = styled.div<{ $isLive: boolean; $isCurrent?: boolean }>`\n  position: absolute;\n  left: -24px;\n  z-index: 1;\n  top: 33px;\n\n  > img {\n    width: 78px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    top: ${({ $isLive }) => ($isLive ? '46px' : '33px')};\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    left: auto;\n    top: ${({ $isLive }) => ($isLive ? '61px' : '48px')};\n    right: ${({ $isCurrent }) => ($isCurrent ? '17px' : '90px')};\n\n    > img {\n      width: 123px;\n    }\n  }\n  ${({ theme }) => theme.mediaQueries.lg} {\n    right: ${({ $isCurrent }) => ($isCurrent ? '67px' : '90px')};\n  }\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    right: 90px;\n  }\n`\n\nconst NoHatBunny = ({ isLive, isCurrent }: { isLive?: boolean; isCurrent?: boolean }) => {\n  const { isXs, isSm, isMd } = useMatchBreakpoints()\n  const isSmallerThanTablet = isXs || isSm || isMd\n  if (isSmallerThanTablet && isLive) return null\n  return (\n    <StyledNoHatBunny $isLive={isLive} $isCurrent={isCurrent}>\n      <img\n        src={`/images/ifos/assets/bunnypop-${!isSmallerThanTablet ? 'right' : 'left'}.png`}\n        width={123}\n        height={162}\n        alt=\"bunny\"\n      />\n    </StyledNoHatBunny>\n  )\n}\n\n// Active Ifo\nexport const IfoCurrentCard = ({\n  ifo,\n  publicIfoData,\n  walletIfoData,\n}: {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const shouldShowBunny = publicIfoData.status === 'live' || publicIfoData.status === 'coming_soon'\n\n  return (\n    <>\n      {isMobile && (\n        <Box\n          className=\"sticky-header\"\n          position=\"sticky\"\n          bottom=\"48px\"\n          width=\"100%\"\n          zIndex={6}\n          maxWidth={['400px', '400px', '400px', '100%']}\n        >\n          <Header $isCurrent ifoId={ifo.id} />\n          <IfoRibbon publicIfoData={publicIfoData} />\n          {shouldShowBunny && <NoHatBunny isLive={publicIfoData.status === 'live'} />}\n        </Box>\n      )}\n      <Box position=\"relative\" width=\"100%\" maxWidth={['400px', '400px', '400px', '100%']}>\n        {!isMobile && shouldShowBunny && <NoHatBunny isCurrent isLive={publicIfoData.status === 'live'} />}\n        <StyledCard $isCurrent>\n          {!isMobile && (\n            <>\n              <Header $isCurrent ifoId={ifo.id} />\n              <IfoRibbon publicIfoData={publicIfoData} />\n            </>\n          )}\n          <IfoCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n          <StyledCardFooter>\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n              {isExpanded ? t('Hide') : t('Details')}\n            </ExpandableLabel>\n            {isExpanded && <IfoAchievement ifo={ifo} publicIfoData={publicIfoData} />}\n          </StyledCardFooter>\n        </StyledCard>\n      </Box>\n    </>\n  )\n}\n\nconst FoldableContent = styled.div<{ isVisible: boolean }>`\n  display: ${({ isVisible }) => (isVisible ? 'block' : 'none')};\n`\n\n// Past Ifo\nconst IfoFoldableCard = ({\n  ifo,\n  publicIfoData,\n  walletIfoData,\n}: {\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Box position=\"relative\">\n      {isExpanded && isDesktop && <NoHatBunny isLive={false} />}\n      <Box as={StyledCard} borderRadius=\"32px\">\n        <Box position=\"relative\">\n          <Header ifoId={ifo.id}>\n            <ExpandableButton expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)} />\n          </Header>\n          {isExpanded && (\n            <>\n              <IfoRibbon publicIfoData={publicIfoData} />\n            </>\n          )}\n        </Box>\n        <FoldableContent isVisible={isExpanded}>\n          <IfoCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n          <IfoAchievement ifo={ifo} publicIfoData={publicIfoData} />\n        </FoldableContent>\n      </Box>\n    </Box>\n  )\n}\n\nconst IfoCard: React.FC<IfoFoldableCardProps> = ({ ifo, publicIfoData, walletIfoData }) => {\n  const { currentBlock } = useBlock()\n  const { fetchIfoData: fetchPublicIfoData, isInitialized: isPublicIfoDataInitialized, secondsUntilEnd } = publicIfoData\n  const {\n    contract,\n    fetchIfoData: fetchWalletIfoData,\n    resetIfoData: resetWalletIfoData,\n    isInitialized: isWalletDataInitialized,\n  } = walletIfoData\n  const [enableStatus, setEnableStatus] = useState(EnableStatus.DISABLED)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const raisingTokenContract = useERC20(ifo.currency.address)\n  // Continue to fetch 2 more minutes to get latest data\n  const isRecentlyActive =\n    (publicIfoData.status !== 'finished' || (publicIfoData.status === 'finished' && secondsUntilEnd >= -120)) &&\n    ifo.isActive\n  const onApprove = useIfoApprove(raisingTokenContract, contract.address)\n  const { toastSuccess, toastError } = useToast()\n  const fastRefresh = useFastFresh()\n  const isWindowVisible = useIsWindowVisible()\n\n  useEffect(() => {\n    if (isRecentlyActive || !isPublicIfoDataInitialized) {\n      fetchPublicIfoData(currentBlock)\n    }\n  }, [isRecentlyActive, isPublicIfoDataInitialized, fetchPublicIfoData, currentBlock])\n\n  useEffect(() => {\n    if (isWindowVisible && (isRecentlyActive || !isWalletDataInitialized)) {\n      if (account) {\n        fetchWalletIfoData()\n      }\n    }\n\n    if (!account && isWalletDataInitialized) {\n      resetWalletIfoData()\n    }\n  }, [\n    isWindowVisible,\n    account,\n    isRecentlyActive,\n    isWalletDataInitialized,\n    fetchWalletIfoData,\n    resetWalletIfoData,\n    fastRefresh,\n  ])\n\n  const handleApprove = async () => {\n    try {\n      setEnableStatus(EnableStatus.IS_ENABLING)\n      await onApprove(\n        (tx) => {\n          toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        },\n        (receipt) => {\n          toastSuccess(\n            t('Successfully Enabled!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('You can now participate in the %symbol% IFO.', { symbol: ifo.token.symbol })}\n            </ToastDescriptionWithTx>,\n          )\n        },\n        (receipt) => {\n          toastError(\n            t('Error'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n            </ToastDescriptionWithTx>,\n          )\n        },\n      )\n      setEnableStatus(EnableStatus.ENABLED)\n    } catch (error) {\n      setEnableStatus(EnableStatus.DISABLED)\n    }\n  }\n\n  useEffect(() => {\n    const checkAllowance = async () => {\n      try {\n        const response = await raisingTokenContract.allowance(account, contract.address)\n        const currentAllowance = new BigNumber(response.toString())\n        setEnableStatus(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\n      } catch (error) {\n        setEnableStatus(EnableStatus.DISABLED)\n      }\n    }\n\n    if (account) {\n      checkAllowance()\n    }\n  }, [account, raisingTokenContract, contract, setEnableStatus])\n\n  return (\n    <>\n      <StyledCardBody>\n        <CardsWrapper singleCard={!publicIfoData.poolBasic || !walletIfoData.poolBasic}>\n          {publicIfoData.poolBasic && walletIfoData.poolBasic && (\n            <IfoPoolCard\n              poolId={PoolIds.poolBasic}\n              ifo={ifo}\n              publicIfoData={publicIfoData}\n              walletIfoData={walletIfoData}\n              onApprove={handleApprove}\n              enableStatus={enableStatus}\n            />\n          )}\n          <IfoPoolCard\n            poolId={PoolIds.poolUnlimited}\n            ifo={ifo}\n            publicIfoData={publicIfoData}\n            walletIfoData={walletIfoData}\n            onApprove={handleApprove}\n            enableStatus={enableStatus}\n          />\n        </CardsWrapper>\n      </StyledCardBody>\n    </>\n  )\n}\n\nexport default IfoFoldableCard\n","import { Box } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst IfoLayout = styled(Box)`\n  > div:not(.sticky-header) {\n    margin-bottom: 32px;\n  }\n`\nexport const IfoLayoutWrapper = styled(IfoLayout)`\n  column-gap: 32px;\n  display: grid;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: minmax(300px, 1fr) minmax(462px, 2fr);\n  }\n\n  > div {\n    margin: 0 auto;\n    align-items: flex-start;\n  }\n`\n\nexport default IfoLayout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { vaultPoolConfig } from 'config/constants/pools'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\ninterface AprRowProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, stakedBalance, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const {\n    stakingToken,\n    earningToken,\n    isFinished,\n    apr,\n    rawApr,\n    earningTokenPrice,\n    stakingTokenPrice,\n    userData,\n    vaultKey,\n  } = pool\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const tooltipContent = vaultKey\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      earningTokenPrice={earningTokenPrice}\n      stakingTokenPrice={stakingTokenPrice}\n      apr={vaultKey ? rawApr : apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink}\n      stakingTokenBalance={stakedBalance.plus(stakingTokenBalance)}\n      stakingTokenSymbol={stakingToken.symbol}\n      earningTokenSymbol={earningToken.symbol}\n      autoCompoundFrequency={vaultPoolConfig[vaultKey]?.autoCompoundFrequency ?? 0}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{vaultKey ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {apr || isFinished ? (\n        <ApyLabelContainer alignItems=\"center\" onClick={onPresentApyModal}>\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={isFinished ? 0 : apr}\n            decimals={2}\n            unit=\"%\"\n            onClick={onPresentApyModal}\n          />\n          {!isFinished && (\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          )}\n        </ApyLabelContainer>\n      ) : (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled from 'styled-components'\nimport { Card } from '@pancakeswap/uikit'\n\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  width: 100%;\n  min-width: 300px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL } from 'config'\nimport { useBlock } from 'state/block/hooks'\nimport { useVaultPoolByKey, useVaultPools } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport { getAddress, getVaultPoolAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanLink } from 'utils'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ninterface ExpandedFooterProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    vaultKey,\n  } = pool\n\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useVaultPoolByKey(vaultKey)\n\n  const vaultPools = useVaultPools()\n  const cakeInVaults = Object.values(vaultPools).reduce((total, vault) => {\n    return total.plus(vault.totalCakeInVault)\n  }, BIG_ZERO)\n\n  const tokenAddress = earningToken.address || ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getVaultPoolAddress(vaultKey)\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (vaultKey) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(cakeInVaults)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {vaultKey && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            {performanceFee ? (\n              <Text ml=\"4px\" small>\n                {performanceFee / 100}%\n              </Text>\n            ) : (\n              <Skeleton width=\"90px\" height=\"21px\" />\n            )}\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`/info/token/${earningToken.address}`} bold={false} small>\n          {t('See Token Info')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${vaultKey ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: DeserializedPool\n  account: string\n  totalCakeInVault?: BigNumber\n  defaultExpanded?: boolean\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account, defaultExpanded }) => {\n  const { vaultKey } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(defaultExpanded || false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(vaultKey ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {vaultKey ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import { CardHeader, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst PoolCardHeader: React.FC<{\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ isFinished = false, isStaking = false, children }) => {\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        {children}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport const PoolCardHeaderTitle: React.FC<{ isFinished?: boolean; title: string; subTitle: string }> = ({\n  isFinished,\n  title,\n  subTitle,\n}) => {\n  return (\n    <Flex flexDirection=\"column\">\n      <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n        {title}\n      </Heading>\n      <Text fontSize=\"14px\" color={isFinished ? 'textDisabled' : 'textSubtle'}>\n        {subTitle}\n      </Text>\n    </Flex>\n  )\n}\n\nexport default PoolCardHeader\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers, Contract } from 'ethers'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useSousChef, useVaultPoolContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { VaultKey } from 'state/types'\nimport { logError } from 'utils/sentry'\n\nexport const useApprovePool = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await callWithGasPrice(lpContract, 'approve', [sousChefContract.address, ethers.constants.MaxUint256])\n      toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      const receipt = await tx.wait()\n\n      dispatch(updateUserAllowance(sousId, account))\n      if (receipt.status) {\n        toastSuccess(\n          t('Contract Enabled'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol })}\n          </ToastDescriptionWithTx>,\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      logError(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }, [\n    account,\n    dispatch,\n    lpContract,\n    sousChefContract,\n    sousId,\n    earningTokenSymbol,\n    t,\n    toastError,\n    toastSuccess,\n    callWithGasPrice,\n  ])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (vaultKey: VaultKey, setLastUpdated: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const vaultPoolContract = useVaultPoolContract(vaultKey)\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const cakeContract = useCake()\n\n  const handleApprove = async () => {\n    const tx = await callWithGasPrice(cakeContract, 'approve', [vaultPoolContract.address, ethers.constants.MaxUint256])\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n    setRequestedApproval(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(\n        t('Contract Enabled'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' })}\n        </ToastDescriptionWithTx>,\n      )\n      setLastUpdated()\n      setRequestedApproval(false)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setRequestedApproval(false)\n    }\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = (vaultKey: VaultKey) => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const vaultPoolContract = useVaultPoolContract(vaultKey)\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const currentAllowance = await cakeContract.allowance(account, vaultPoolContract.address)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, vaultPoolContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n","import React from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { VaultKey } from 'state/types'\nimport { useVaultApprove } from '../../../hooks/useApprove'\n\ninterface ApprovalActionProps {\n  setLastUpdated: () => void\n  isLoading?: boolean\n  vaultKey: VaultKey\n}\n\nconst VaultApprovalAction: React.FC<ApprovalActionProps> = ({ vaultKey, isLoading = false, setLastUpdated }) => {\n  const { t } = useTranslation()\n\n  const { handleApprove, requestedApproval } = useVaultApprove(vaultKey, setLastUpdated)\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default VaultApprovalAction\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href=\"/swap\">\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport { Flex, Text, IconButton, AddIcon, MinusIcon, useModal, Skeleton, Box } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport { convertSharesToCake } from '../../../helpers'\nimport VaultStakeModal from '../VaultStakeModal'\n\ninterface HasStakeActionProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  performanceFee: number\n}\n\nconst HasSharesActions: React.FC<HasStakeActionProps> = ({ pool, stakingTokenBalance, performanceFee }) => {\n  const {\n    totalShares,\n    userData: { userShares, isLoading },\n    pricePerFullShare,\n  } = useVaultPoolByKey(pool.vaultKey)\n  const { stakingToken } = pool\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const cakePriceBusd = usePriceCakeBusd()\n  const stakedDollarValue = cakePriceBusd.gt(0)\n    ? getBalanceNumber(cakeAsBigNumber.multipliedBy(cakePriceBusd), stakingToken.decimals)\n    : 0\n  const { t } = useTranslation()\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal stakingMax={stakingTokenBalance} performanceFee={performanceFee} pool={pool} />,\n  )\n  const [onPresentUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const totalSharesPercentage =\n    userShares &&\n    userShares.gt(0) &&\n    totalShares &&\n    userShares.dividedBy(totalShares).multipliedBy(100).decimalPlaces(5)\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text as={Flex} fontSize=\"12px\" color=\"textSubtle\" flexWrap=\"wrap\">\n          {cakePriceBusd.gt(0) ? (\n            <Balance value={stakedDollarValue} fontSize=\"12px\" color=\"textSubtle\" decimals={2} prefix=\"~\" unit=\" USD\" />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n          {!isLoading && totalSharesPercentage && pool.vaultKey === VaultKey.IfoPool && (\n            <Box as=\"span\" ml=\"2px\">\n              | {t('%num% of total', { num: `${totalSharesPercentage.toString()}%` })}\n            </Box>\n          )}\n        </Text>\n      </Flex>\n      <Flex>\n        <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"24px\" />\n        </IconButton>\n        <IconButton variant=\"secondary\" onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n          <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n        </IconButton>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HasSharesActions\n","import { Button, Flex, Skeleton, useModal } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport { DeserializedPool } from 'state/types'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport VaultStakeModal from '../VaultStakeModal'\nimport HasSharesActions from './HasSharesActions'\n\ninterface VaultStakeActionsProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  accountHasSharesStaked: boolean\n  performanceFee: number\n  isLoading?: boolean\n}\n\nconst VaultStakeActions: React.FC<VaultStakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  accountHasSharesStaked,\n  performanceFee,\n  isLoading = false,\n}) => {\n  const { stakingToken } = pool\n  const { t } = useTranslation()\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n  const [onPresentStake] = useModal(\n    <VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} performanceFee={performanceFee} />,\n  )\n\n  const renderStakeAction = () => {\n    return accountHasSharesStaked ? (\n      <HasSharesActions pool={pool} stakingTokenBalance={stakingTokenBalance} performanceFee={performanceFee} />\n    ) : (\n      <Button onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>{t('Stake')}</Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default VaultStakeActions\n","import BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box, Skeleton } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useIfoPoolCredit } from 'state/pools/hooks'\nimport QuestionHelper from 'components/QuestionHelper'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\nimport { useCheckVaultApprovalStatus } from '../../../hooks/useApprove'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nexport const IfoVaultCardAvgBalance = () => {\n  const { t } = useTranslation()\n  const credit = useIfoPoolCredit()\n\n  const cakeAsNumberBalance = getBalanceNumber(credit)\n  const creditsDollarValue: number | undefined = useBUSDCakeAmount(cakeAsNumberBalance)\n\n  return (\n    <>\n      <FlexGap gap=\"4px\" alignItems=\"center\">\n        <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n          {t('IFO Credit')}\n        </InlineText>\n        <QuestionHelper\n          size=\"24px\"\n          placement=\"auto\"\n          display=\"inline\"\n          text={\n            <>\n              <Text>\n                {t(\n                  'Your entry limit in the next IFO sale is determined by your IFO credit. This is calculated by the average CAKE balance of the principal amount in the IFO pool during the last credit calculation period.',\n                )}\n              </Text>\n              <Text>\n                {t(\n                  'Please note: even the pool is auto compounding. Amount of profits will not be included during IFO credit calculations.',\n                )}\n              </Text>\n            </>\n          }\n        />\n      </FlexGap>\n      <Flex flexDirection=\"column\" pb=\"16px\">\n        <Balance fontSize=\"20px\" bold value={cakeAsNumberBalance} decimals={5} />\n        <Text fontSize=\"12px\" color=\"textSubtle\" display=\"flex\">\n          {creditsDollarValue !== undefined ? (\n            <Balance\n              value={creditsDollarValue}\n              fontSize=\"12px\"\n              color=\"textSubtle\"\n              decimals={2}\n              prefix=\"~\"\n              unit=\" USD\"\n            />\n          ) : (\n            <Skeleton mt=\"1px\" height={16} width={64} />\n          )}\n        </Text>\n      </Flex>\n    </>\n  )\n}\n\nconst CakeVaultCardActions: React.FC<{\n  pool: DeserializedPool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n  performanceFee: number\n}> = ({ pool, accountHasSharesStaked, isLoading, performanceFee }) => {\n  const { stakingToken, userData } = pool\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus(pool.vaultKey)\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {isVaultApproved && pool.vaultKey === VaultKey.IfoPool && <IfoVaultCardAvgBalance />}\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t('Stake')}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t('Staked (compounding)') : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n            performanceFee={performanceFee}\n          />\n        ) : (\n          <VaultApprovalAction vaultKey={pool.vaultKey} isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n","import React from 'react'\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\n\ninterface RecentCakeProfitBalanceProps {\n  cakeToDisplay: number\n  dollarValueToDisplay: number\n  dateStringToDisplay: string\n}\n\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\n  cakeToDisplay,\n  dollarValueToDisplay,\n  dateStringToDisplay,\n}) => {\n  const { t } = useTranslation()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    {\n      placement: 'bottom-end',\n    },\n  )\n\n  return (\n    <>\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\n      </TooltipText>\n    </>\n  )\n}\n\nexport default RecentCakeProfitBalance\n","import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { VaultKey } from 'state/types'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = ({ vaultKey }: { vaultKey: VaultKey }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useVaultPoolByKey(vaultKey)\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  CardBody,\n  Flex,\n  Text,\n  CardProps,\n  HelpIcon,\n  useTooltip,\n  LinkExternal,\n  Link,\n  TokenPairImage,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useIfoPoolCreditBlock, useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool, VaultKey } from 'state/types'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { vaultPoolConfig } from 'config/constants/pools'\nimport { getBscScanLink } from 'utils'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport PoolCardHeader, { PoolCardHeaderTitle } from '../PoolCard/PoolCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps extends CardProps {\n  pool: DeserializedPool\n  showStakedOnly: boolean\n  defaultFooterExpanded?: boolean\n}\n\nexport const CreditCalcBlock = () => {\n  const { creditStartBlock, creditEndBlock, hasEndBlockOver } = useIfoPoolCreditBlock()\n  const { t } = useTranslation()\n\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    hasEndBlockOver ? (\n      <>\n        <Text>\n          {t(\n            'The latest credit calculation period has ended. After the coming IFO, credits will be reset and the calculation will resume.',\n          )}\n        </Text>\n        <LinkExternal href=\"https://twitter.com/pancakeswap\">\n          {t('Follow us on Twitter to catch the latest news about the coming IFO.')}\n        </LinkExternal>\n      </>\n    ) : (\n      <>\n        <Text>\n          {t(\n            'The start block of the current calculation period. Your average IFO CAKE Pool staking balance is calculated throughout this period.',\n          )}\n        </Text>\n        <LinkExternal href=\"https://medium.com/pancakeswap/initial-farm-offering-ifo-3-0-ifo-staking-pool-622d8bd356f1\">\n          {t('Check out our Medium article for more details.')}\n        </LinkExternal>\n      </>\n    ),\n    { placement: 'auto' },\n  )\n\n  return (\n    <Flex mt=\"8px\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{hasEndBlockOver ? t('Credit calculation ended:') : t('Credit calculation starts:')}</Text>\n      <Flex mr=\"6px\" alignItems=\"center\">\n        <Link\n          external\n          href={getBscScanLink(hasEndBlockOver ? creditEndBlock : creditStartBlock, 'block')}\n          mr=\"4px\"\n          color={hasEndBlockOver ? 'warning' : 'primary'}\n          fontSize=\"14px\"\n        >\n          {hasEndBlockOver ? creditEndBlock : creditStartBlock}\n        </Link>\n        <span ref={targetRef}>\n          <HelpIcon color=\"textSubtle\" />\n        </span>\n      </Flex>\n      {tooltipVisible && tooltip}\n    </Flex>\n  )\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly, defaultFooterExpanded, ...props }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFeeAsDecimal },\n    pricePerFullShare,\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isActive {...props}>\n      <PoolCardHeader isStaking={accountHasSharesStaked}>\n        <PoolCardHeaderTitle\n          title={t(vaultPoolConfig[pool.vaultKey].name)}\n          subTitle={t(vaultPoolConfig[pool.vaultKey].description)}\n        />\n        <TokenPairImage {...vaultPoolConfig[pool.vaultKey].tokenImage} width={64} height={64} />\n      </PoolCardHeader>\n      <StyledCardBody isLoading={isLoading}>\n        <AprRow pool={pool} stakedBalance={cakeAsBigNumber} performanceFee={performanceFeeAsDecimal} />\n        {pool.vaultKey === VaultKey.IfoPool && <CreditCalcBlock />}\n        <FlexGap mt=\"16px\" gap=\"24px\" flexDirection={accountHasSharesStaked ? 'column-reverse' : 'column'}>\n          <Box>\n            <Box mt=\"24px\">\n              <RecentCakeProfitRow vaultKey={pool.vaultKey} />\n            </Box>\n            <Box mt=\"8px\">\n              <UnstakingFeeCountdownRow vaultKey={pool.vaultKey} />\n            </Box>\n          </Box>\n          <Flex flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions\n                pool={pool}\n                accountHasSharesStaked={accountHasSharesStaked}\n                isLoading={isLoading}\n                performanceFee={performanceFeeAsDecimal}\n              />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <ConnectWalletButton />\n              </>\n            )}\n          </Flex>\n        </FlexGap>\n      </StyledCardBody>\n      <CardFooter defaultExpanded={defaultFooterExpanded} pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div<{ isAutoVault?: boolean }>`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: ${({ isAutoVault }) => (isAutoVault ? '130px' : 'auto')};\n  }\n}\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stakeFarm } from 'utils/calls'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport getGasPrice from 'utils/getGasPrice'\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const gasPrice = getGasPrice()\n  return sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), {\n    ...options,\n    gasPrice,\n  })\n}\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  const gasPrice = getGasPrice()\n  return sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), {\n    ...options,\n    gasPrice,\n  })\n}\n\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (\n      amount: string,\n      decimals: number,\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      let tx\n      if (sousId === 0) {\n        tx = await stakeFarm(masterChefContract, 0, amount)\n      } else if (isUsingBnb) {\n        tx = await sousStakeBnb(sousChefContract, amount)\n      } else {\n        tx = await sousStake(sousChefContract, amount, decimals)\n      }\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n        dispatch(updateUserStakedBalance(sousId, account))\n        dispatch(updateUserBalance(sousId, account))\n      } else {\n        onError(receipt)\n      }\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakePool\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport getGasPrice from 'utils/getGasPrice'\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\n\nconst sousUnstake = async (sousChefContract: any, amount: string, decimals: number) => {\n  const gasPrice = getGasPrice()\n  const units = parseUnits(amount, decimals)\n\n  const tx = await sousChefContract.withdraw(units.toString(), {\n    gasPrice,\n  })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousEmergencyUnstake = async (sousChefContract: any) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.emergencyWithdraw({ gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useUnstakePool = (sousId: number, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (\n      amount: string,\n      decimals: number,\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\n      onSuccess: (receipt: TransactionReceipt) => void,\n      onError: (receipt: TransactionReceipt) => void,\n    ) => {\n      let tx\n      if (sousId === 0) {\n        tx = await unstakeFarm(masterChefContract, 0, amount)\n      } else if (enableEmergencyWithdraw) {\n        tx = await sousEmergencyUnstake(sousChefContract)\n      } else {\n        tx = await sousUnstake(sousChefContract, amount, decimals)\n      }\n      onTransactionSubmitted(tx)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onSuccess(receipt)\n        dispatch(updateUserStakedBalance(sousId, account))\n        dispatch(updateUserBalance(sousId, account))\n        dispatch(updateUserPendingReward(sousId, account))\n      } else {\n        onError(receipt)\n      }\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  Link,\n  CalculateIcon,\n  IconButton,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { DeserializedPool } from 'state/types'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport { logError } from 'utils/sentry'\nimport PercentageButton from './PercentageButton'\nimport useStakePool from '../../../hooks/useStakePool'\nimport useUnstakePool from '../../../hooks/useUnstakePool'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, earningTokenPrice, apr, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n  const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n  const userNotEnoughToken = isRemovingStake\n    ? userData.stakedBalance.lt(fullDecimalStakeAmount)\n    : userData.stakingTokenBalance.lt(fullDecimalStakeAmount)\n\n  const usdValueStaked = new BigNumber(stakeAmount).times(stakingTokenPrice)\n  const formattedUsdValueStaked = !usdValueStaked.isNaN() && formatNumber(usdValueStaked.toNumber())\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice,\n  })\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [\n    stakeAmount,\n    stakingLimit,\n    userData,\n    stakingToken,\n    isRemovingStake,\n    setHasReachedStakedLimit,\n    fullDecimalStakeAmount,\n  ])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n    try {\n      if (isRemovingStake) {\n        // unstaking\n        await onUnstake(\n          stakeAmount,\n          stakingToken.decimals,\n          (tx) => {\n            toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n          },\n          (receipt) => {\n            toastSuccess(\n              `${t('Unstaked')}!`,\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t('Your %symbol% earnings have also been harvested to your wallet!', {\n                  symbol: earningToken.symbol,\n                })}\n              </ToastDescriptionWithTx>,\n            )\n          },\n          (receipt) => {\n            toastError(\n              t('Error'),\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n              </ToastDescriptionWithTx>,\n            )\n          },\n        )\n      } else {\n        // staking\n        await onStake(\n          stakeAmount,\n          stakingToken.decimals,\n          (tx) => {\n            toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n          },\n          (receipt) => {\n            toastSuccess(\n              `${t('Staked')}!`,\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t('Your %symbol% funds have been staked in the pool!', {\n                  symbol: stakingToken.symbol,\n                })}\n              </ToastDescriptionWithTx>,\n            )\n          },\n          (receipt) => {\n            toastError(\n              t('Error'),\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\n              </ToastDescriptionWithTx>,\n            )\n          },\n        )\n      }\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      logError(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        earningTokenPrice={earningTokenPrice}\n        stakingTokenPrice={stakingTokenPrice}\n        apr={apr}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={userData.stakedBalance.plus(stakingTokenBalance)}\n        stakingTokenSymbol={stakingToken.symbol}\n        earningTokenSymbol={earningToken.symbol}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      minWidth=\"346px\"\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${formattedUsdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit || userNotEnoughToken}\n        decimals={stakingToken.decimals}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      {userNotEnoughToken && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Insufficient %symbol% balance', {\n            symbol: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n      </Flex>\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          {Number.isFinite(annualRoi) ? (\n            <AnnualRoiContainer\n              alignItems=\"center\"\n              onClick={() => {\n                setShowRoiCalculator(true)\n              }}\n            >\n              <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n              <IconButton variant=\"text\" scale=\"sm\">\n                <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n              </IconButton>\n            </AnnualRoiContainer>\n          ) : (\n            <Skeleton width={60} />\n          )}\n        </Flex>\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || userNotEnoughToken}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={getTokenLink}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useVaultPoolByKey } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: DeserializedPool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    vaultKey,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus(pool.vaultKey)\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } = useVaultApprove(\n    pool.vaultKey,\n    setLastUpdated,\n  )\n\n  const handleApprove = vaultKey ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = vaultKey ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !vaultKey && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useVaultPoolByKey(pool.vaultKey)\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = vaultKey && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = vaultKey ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (vaultKey) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (vaultKey) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer isAutoVault={!!vaultKey}>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {vaultKey ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={vaultKey ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={vaultKey ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import {\n  Box,\n  Card,\n  CardBody,\n  CardHeader,\n  ExpandableButton,\n  Flex,\n  HelpIcon,\n  Text,\n  useMatchBreakpoints,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\nimport tokens from 'config/constants/tokens'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\nimport React, { useState } from 'react'\nimport { useIfoPoolCredit, useIfoPoolVault, useIfoWithApr } from 'state/pools/hooks'\nimport { VaultKey } from 'state/types'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CakeVaultCard, { CreditCalcBlock } from 'views/Pools/components/CakeVaultCard'\nimport RecentCakeProfitCountdownRow from 'views/Pools/components/CakeVaultCard/RecentCakeProfitRow'\nimport UnstakingFeeCountdownRow from 'views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow'\nimport { IfoVaultCardAvgBalance } from 'views/Pools/components/CakeVaultCard/VaultCardActions'\nimport AprRow from 'views/Pools/components/PoolCard/AprRow'\nimport ExpandedFooter from 'views/Pools/components/PoolCard/CardFooter/ExpandedFooter'\nimport Staked from 'views/Pools/components/PoolsTable/ActionPanel/Stake'\nimport { ActionContainer } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\nimport { convertSharesToCake } from '../../Pools/helpers'\n\nconst StyledCardMobile = styled(Card)`\n  max-width: 400px;\n  width: 100%;\n`\n\nconst StyledTokenContent = styled(Flex)`\n  ${Text} {\n    line-height: 1.2;\n    white-space: nowrap;\n  }\n`\n\nconst StyledCardFooter = styled(Box)`\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: grid;\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  gap: 16px;\n  ${ActionContainer} {\n    margin: 0;\n    background-color: ${({ theme }) => theme.colors.invertedContrast};\n  }\n`\n\nconst IfoPoolVaultCardMobile: React.FC = () => {\n  const { pool } = useIfoWithApr()\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const credit = useIfoPoolCredit()\n  const {\n    fees: { performanceFeeAsDecimal },\n    userData: { userShares, isLoading: userDataLoading },\n    pricePerFullShare,\n  } = useIfoPoolVault()\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const cakeAsNumberBalance = getBalanceNumber(credit)\n  const stakedDollarValue = useBUSDCakeAmount(cakeAsNumberBalance)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.'),\n    {\n      placement: 'bottom',\n    },\n  )\n  return (\n    <StyledCardMobile isActive>\n      <CardHeader p=\"16px\">\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <StyledTokenContent alignItems=\"center\" flex={1}>\n            <TokenPairImage width={24} height={24} primaryToken={tokens.cake} secondaryToken={tokens.cake} />\n            <Box ml=\"8px\">\n              <Text fontSize=\"12px\" bold color=\"secondary\" textTransform=\"uppercase\">\n                {t('Staked')}\n              </Text>\n              <Text small bold>\n                IFO CAKE\n              </Text>\n              <Text color=\"textSubtle\" fontSize=\"12px\">\n                {t('Stake')} CAKE\n              </Text>\n            </Box>\n          </StyledTokenContent>\n          <StyledTokenContent flexDirection=\"column\" flex={1}>\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {t('IFO Credit')}\n            </Text>\n            <Balance small bold decimals={3} value={cakeAsNumberBalance} />\n            <Balance\n              value={stakedDollarValue || 0}\n              fontSize=\"12px\"\n              color=\"textSubtle\"\n              decimals={2}\n              prefix=\"~\"\n              unit=\" USD\"\n            />\n          </StyledTokenContent>\n          <ExpandableButton expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)} />\n        </Flex>\n      </CardHeader>\n      {isExpanded && (\n        <>\n          <StyledCardBody>\n            <AprRow pool={pool} stakedBalance={cakeAsBigNumber} performanceFee={performanceFeeAsDecimal} />\n            <CreditCalcBlock />\n            <ActionContainer>\n              <IfoVaultCardAvgBalance />\n            </ActionContainer>\n            <Staked pool={pool} userDataLoaded={!userDataLoading} />\n            <ActionContainer>\n              <Box>\n                <RecentCakeProfitCountdownRow vaultKey={VaultKey.IfoPool} />\n              </Box>\n              <Box mt=\"8px\">\n                <UnstakingFeeCountdownRow vaultKey={VaultKey.IfoPool} />\n              </Box>\n            </ActionContainer>\n          </StyledCardBody>\n          <StyledCardFooter>\n            <ExpandedFooter account={account} pool={pool} />\n            <Flex alignItems=\"center\">\n              <CompoundingPoolTag />\n              {tooltipVisible && tooltip}\n              <Flex ref={targetRef}>\n                <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n              </Flex>\n            </Flex>\n          </StyledCardFooter>\n        </>\n      )}\n    </StyledCardMobile>\n  )\n}\n\nconst IfoPoolVaultCard = () => {\n  const { pool } = useIfoWithApr()\n  const { isMd, isXs, isSm } = useMatchBreakpoints()\n  const isSmallerThanTablet = isMd || isXs || isSm\n  if (isSmallerThanTablet) {\n    return <IfoPoolVaultCardMobile />\n  }\n\n  return <CakeVaultCard pool={pool} showStakedOnly={false} m=\"auto\" />\n}\n\nexport default IfoPoolVaultCard\n","import { ContextApi } from 'contexts/Localization/types'\n\nconst config = (t: ContextApi['t']) => {\n  return [\n    {\n      title: t('What’s the difference between a Basic Sale and Unlimited Sale?'),\n      description: [\n        t(\n          'In the Basic Sale, every user can commit a maximum of about 100 USD worth of CAKE. We calculate the maximum CAKE amount about 30 minutes before each IFO. The Basic Sale has no participation fee.',\n        ),\n        t(\n          'In the Unlimited Sale, there’s no limit to the amount of CAKE you can commit. However, there’s a fee for participation: see below.',\n        ),\n      ],\n    },\n    {\n      title: t('Which sale should I commit to? Can I do both?'),\n      description: [\n        t(\n          'You can choose one or both at the same time! If you’re only committing a small amount, we recommend the Basic Sale first. Just remember you need a PancakeSwap Profile in order to participate.',\n        ),\n      ],\n    },\n    {\n      title: t('How much is the participation fee?'),\n      description: [\n        t('There’s only a participation fee for the Unlimited Sale: there’s no fee for the Basic Sale.'),\n        t('The fee will start at 1%.'),\n        t(\n          'The 1% participation fee decreases in cliffs, based on the percentage of overflow from the “Unlimited” portion of the sale.',\n        ),\n      ],\n    },\n    {\n      title: t('Where does the participation fee go?'),\n      description: [t('The CAKE from the participation fee will be thrown into the weekly token burn.')],\n    },\n    {\n      title: t('How can I get an achievement for participating in the IFO?'),\n      description: [\n        t('You need to contribute a minimum of about 10 USD worth of CAKE to either sale.'),\n        t(\n          'You can contribute to one or both, it doesn’t matter: only your overall contribution is counted for the achievement.',\n        ),\n      ],\n    },\n  ]\n}\nexport default config\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Heading, Card, CardHeader, CardBody, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport FoldableText from 'components/FoldableSection/FoldableText'\nimport config from './config'\n\nconst ImageWrapper = styled.div`\n  flex: none;\n  order: 2;\n  max-width: 414px;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 1;\n  }\n`\n\nconst DetailsWrapper = styled.div`\n  order: 1;\n  margin-bottom: 40px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 2;\n    margin-bottom: 0;\n    margin-left: 40px;\n  }\n`\n\nconst IfoQuestions = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems={['center', null, null, 'start']} flexDirection={['column', null, null, 'row']}>\n      <ImageWrapper>\n        <img src=\"/images/ifos/ifo-bunny.png\" alt=\"ifo bunny\" width=\"414px\" height=\"500px\" />\n      </ImageWrapper>\n      <DetailsWrapper>\n        <Card>\n          <CardHeader>\n            <Heading scale=\"lg\" color=\"secondary\">\n              {t('Details')}\n            </Heading>\n          </CardHeader>\n          <CardBody>\n            {config(t).map(({ title, description }, i, { length }) => (\n              <FoldableText key={title} id={title} mb={i + 1 === length ? '' : '24px'} title={title}>\n                {description.map((desc) => {\n                  return (\n                    <Text key={desc} color=\"textSubtle\" as=\"p\">\n                      {desc}\n                    </Text>\n                  )\n                })}\n              </FoldableText>\n            ))}\n          </CardBody>\n        </Card>\n      </DetailsWrapper>\n    </Flex>\n  )\n}\n\nexport default IfoQuestions\n","import React from 'react'\nimport styled from 'styled-components'\nimport every from 'lodash/every'\nimport {\n  Stepper,\n  Step,\n  StepStatus,\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Button,\n  Box,\n  CheckmarkIcon,\n  Flex,\n  useTooltip,\n  TooltipText,\n  LogoRoundIcon,\n  Skeleton,\n  useModal,\n  Link,\n} from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport Container from 'components/Layout/Container'\nimport { useProfile } from 'state/profile/hooks'\nimport Balance from 'components/Balance'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport VaultStakeModal from 'views/Pools/components/CakeVaultCard/VaultStakeModal'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport BigNumber from 'bignumber.js'\nimport { useIfoPoolVault, useIfoPoolCredit, useIfoWithApr } from 'state/pools/hooks'\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\n\ninterface Props {\n  ifo: Ifo\n  walletIfoData: WalletIfoData\n  isLive?: boolean\n}\n\nconst Wrapper = styled(Container)`\n  margin-left: -16px;\n  margin-right: -16px;\n  padding-top: 48px;\n  padding-bottom: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: -24px;\n    margin-right: -24px;\n  }\n`\n\nconst InlineLink = styled(Link)`\n  display: inline;\n`\n\nconst SmallStakePoolCard = styled(Box)`\n  margin-top: 16px;\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n`\n\nconst Step1 = ({ hasProfile }: { hasProfile: boolean }) => {\n  const { t } = useTranslation()\n  const ifoPoolVault = useIfoPoolVault()\n  const credit = useIfoPoolCredit()\n  const { pool } = useIfoWithApr()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Box>\n      <span>\n        {t(\n          'IFO credit is calculated by average block balance in the IFO pool in over the staking period announced with each IFO proposal.',\n        )}\n      </span>{' '}\n      <InlineLink\n        external\n        href=\"https://medium.com/pancakeswap/initial-farm-offering-ifo-3-0-ifo-staking-pool-622d8bd356f1\"\n      >\n        {t('Please refer to our blog post for more details.')}\n      </InlineLink>\n    </Box>,\n    {},\n  )\n\n  const creditDollarValue = useBUSDCakeAmount(getBalanceNumber(credit))\n\n  const stakingTokenBalance = pool?.userData?.stakingTokenBalance\n    ? new BigNumber(pool.userData.stakingTokenBalance)\n    : BIG_ZERO\n\n  const [onPresentStake] = useModal(\n    <VaultStakeModal\n      stakingMax={stakingTokenBalance}\n      performanceFee={ifoPoolVault.fees.performanceFeeAsDecimal}\n      pool={pool}\n    />,\n  )\n\n  return (\n    <CardBody>\n      {tooltipVisible && tooltip}\n      <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n        {t('Stake CAKE in IFO pool')}\n      </Heading>\n      <Box>\n        <Text color=\"textSubtle\" small>\n          {t(\n            'The maximum amount of CAKE user can commit to all the sales combined, is equal to the average CAKE balance in the IFO CAKE pool prior to the IFO. Stake more CAKE to increase the maximum CAKE you can commit to the sale. Missed this IFO? You can keep staking in the IFO CAKE Pool to join the next IFO sale.',\n          )}\n        </Text>\n        <TooltipText as=\"span\" fontWeight={700} ref={targetRef} color=\"textSubtle\" small>\n          {t('How does the IFO credit calculated?')}\n        </TooltipText>\n      </Box>\n      {hasProfile && (\n        <SmallStakePoolCard borderRadius=\"default\" p=\"16px\">\n          <FlexGap justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\" gap=\"16px\">\n            <Flex>\n              <LogoRoundIcon style={{ alignSelf: 'flex-start' }} width={32} height={32} />\n              <Box ml=\"16px\">\n                <Text bold fontSize=\"12px\" textTransform=\"uppercase\" color=\"secondary\">\n                  {t('Your max CAKE entry')}\n                </Text>\n                <Balance fontSize=\"20px\" bold decimals={5} value={getBalanceNumber(credit)} />\n                <Text fontSize=\"12px\" color=\"textSubtle\">\n                  {creditDollarValue ? (\n                    <Balance\n                      value={creditDollarValue}\n                      fontSize=\"12px\"\n                      color=\"textSubtle\"\n                      decimals={2}\n                      prefix=\"~\"\n                      unit=\" USD\"\n                    />\n                  ) : (\n                    <Skeleton mt=\"1px\" height={16} width={64} />\n                  )}\n                </Text>\n              </Box>\n            </Flex>\n            <Button onClick={onPresentStake}>{t('Stake')} CAKE</Button>\n          </FlexGap>\n        </SmallStakePoolCard>\n      )}\n    </CardBody>\n  )\n}\n\nconst Step2 = ({ hasProfile, isLive, isCommitted }: { hasProfile: boolean; isLive: boolean; isCommitted: boolean }) => {\n  const { t } = useTranslation()\n  return (\n    <CardBody>\n      <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n        {t('Commit CAKE')}\n      </Heading>\n      <Text color=\"textSubtle\" small>\n        {t('When the IFO sales are live, you can “commit” your CAKE to buy the tokens being sold.')} <br />\n        {t('We recommend committing to the Basic Sale first, but you can do both if you like.')}\n      </Text>\n      {hasProfile && isLive && !isCommitted && (\n        <Button as=\"a\" href=\"#current-ifo\" mt=\"16px\">\n          {t('Commit CAKE')}\n        </Button>\n      )}\n    </CardBody>\n  )\n}\n\nconst IfoSteps: React.FC<Props> = ({ ifo, walletIfoData, isLive }) => {\n  const { poolBasic, poolUnlimited } = walletIfoData\n  const { hasProfile } = useProfile()\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { balance } = useTokenBalance(ifo.currency.address)\n  const isCommitted =\n    poolBasic.amountTokenCommittedInLP.isGreaterThan(0) || poolUnlimited.amountTokenCommittedInLP.isGreaterThan(0)\n  const stepsValidationStatus = [\n    hasProfile,\n    balance.isGreaterThan(0),\n    isCommitted,\n    poolBasic.hasClaimed || poolUnlimited.hasClaimed,\n  ]\n\n  const getStatusProp = (index: number): StepStatus => {\n    const arePreviousValid = index === 0 ? true : every(stepsValidationStatus.slice(0, index), Boolean)\n    if (stepsValidationStatus[index]) {\n      return arePreviousValid ? 'past' : 'future'\n    }\n    return arePreviousValid ? 'current' : 'future'\n  }\n\n  const renderCardBody = (step: number) => {\n    const isStepValid = stepsValidationStatus[step]\n\n    const renderAccountStatus = () => {\n      if (!account) {\n        return <ConnectWalletButton />\n      }\n\n      if (isStepValid) {\n        return (\n          <Flex alignItems=\"center\">\n            <Text color=\"success\" bold mr=\"8px\">\n              {t('Profile Active!')}\n            </Text>\n            <CheckmarkIcon color=\"success\" />\n          </Flex>\n        )\n      }\n\n      return (\n        <Button as={RouterLink} to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`}>\n          {t('Activate your Profile')}\n        </Button>\n      )\n    }\n\n    switch (step) {\n      case 0:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Activate your Profile')}\n            </Heading>\n            <Text color=\"textSubtle\" small mb=\"16px\">\n              {t('You’ll need an active PancakeSwap Profile to take part in an IFO!')}\n            </Text>\n            {renderAccountStatus()}\n          </CardBody>\n        )\n      case 1:\n        return <Step1 hasProfile={hasProfile} />\n      case 2:\n        return <Step2 hasProfile={hasProfile} isLive={isLive} isCommitted={isCommitted} />\n      case 3:\n        return (\n          <CardBody>\n            <Heading as=\"h4\" color=\"secondary\" mb=\"16px\">\n              {t('Claim your tokens and achievement')}\n            </Heading>\n            <Text color=\"textSubtle\" small>\n              {t(\n                'After the IFO sales finish, you can claim any IFO tokens that you bought, and any unspent CAKE tokens will be returned to your wallet.',\n              )}\n            </Text>\n          </CardBody>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <Wrapper>\n      <Heading id=\"ifo-how-to\" as=\"h2\" scale=\"xl\" color=\"secondary\" mb=\"24px\" textAlign=\"center\">\n        {t('How to Take Part')}\n      </Heading>\n      <Stepper>\n        {stepsValidationStatus.map((_, index) => (\n          <Step\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            index={index}\n            statusFirstPart={getStatusProp(index)}\n            statusSecondPart={getStatusProp(index + 1)}\n          >\n            <Card>{renderCardBody(index)}</Card>\n          </Step>\n        ))}\n      </Stepper>\n    </Wrapper>\n  )\n}\n\nexport default IfoSteps\n","import { ifosConfig } from 'config/constants'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\n\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\nimport Container from 'components/Layout/Container'\nimport { IfoCurrentCard } from './components/IfoFoldableCard'\nimport IfoLayout, { IfoLayoutWrapper } from './components/IfoLayout'\nimport IfoPoolVaultCard from './components/IfoPoolVaultCard'\nimport IfoQuestions from './components/IfoQuestions'\nimport IfoSteps from './components/IfoSteps'\n\nconst IfoStepBackground = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\n  const walletIfoData = useGetWalletIfoV3Data(activeIfo)\n\n  return (\n    <IfoLayout id=\"current-ifo\" py={['24px', '24px', '40px']}>\n      <Container>\n        <IfoLayoutWrapper>\n          <IfoPoolVaultCard />\n          <IfoCurrentCard ifo={activeIfo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n        </IfoLayoutWrapper>\n      </Container>\n      <IfoStepBackground>\n        <Container>\n          <IfoSteps isLive={publicIfoData.status === 'live'} ifo={activeIfo} walletIfoData={walletIfoData} />\n        </Container>\n      </IfoStepBackground>\n      <Container>\n        <IfoQuestions />\n      </Container>\n    </IfoLayout>\n  )\n}\n\nexport default Ifo\n","import { useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    isInitialized: false,\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    thresholdPoints: undefined,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const fetchIfoData = useCallback(\n    async (currentBlock: number) => {\n      const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\n        address,\n        name: method,\n      }))\n\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n      const totalBlocks = endBlockNum - startBlockNum\n      const blocksRemaining = endBlockNum - currentBlock\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n      setState((prev) => ({\n        ...prev,\n        isInitialized: true,\n        status,\n        blocksRemaining,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        progress,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        startBlockNum,\n        endBlockNum,\n        [PoolIds.poolUnlimited]: {\n          ...prev.poolUnlimited,\n          raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n          totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\n        },\n      }))\n    },\n    [address, releaseBlockNumber],\n  )\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n","import { useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\nconst initialState = {\n  isInitialized: false,\n  [PoolIds.poolUnlimited]: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO, // Not used\n  },\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>(initialState)\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(currency.address)\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      ...prevState,\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      ...prevState,\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\n      address,\n      name: method,\n      params: [account],\n    }))\n\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n    const parsedUserInfo: UserInfo = userInfoResponse\n      ? {\n          amount: new BigNumber(userInfoResponse.amount.toString()),\n          claimed: userInfoResponse.claimed,\n        }\n      : { amount: BIG_ZERO, claimed: false }\n\n    setState((prevState) => ({\n      isInitialized: true,\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [account, address])\n\n  const resetIfoData = useCallback(() => {\n    setState(initialState)\n  }, [])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\n}\n\nexport default useGetWalletIfoData\n","import React from 'react'\nimport useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\n\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n}\n\nexport default IfoCardV1Data\n","import { useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\nconst initialState = {\n  isInitialized: false,\n  poolBasic: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n  },\n  poolUnlimited: {\n    amountTokenCommittedInLP: BIG_ZERO,\n    offeringAmountInToken: BIG_ZERO,\n    refundingAmountInLP: BIG_ZERO,\n    taxAmountInLP: BIG_ZERO,\n    hasClaimed: false,\n    isPendingTx: false,\n  },\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>(initialState)\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(currency.address)\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\n      address,\n      name: method,\n      params: [account, [0, 1]],\n    }))\n\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    setState((prevState) => ({\n      ...prevState,\n      isInitialized: true,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, address])\n\n  const resetIfoData = useCallback(() => {\n    setState({ ...initialState })\n  }, [])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\n}\n\nexport default useGetWalletIfoData\n","import React from 'react'\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV2Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\n\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n}\n\nexport default IfoCardV2Data\n","import React from 'react'\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\nimport { Ifo } from 'config/constants/types'\nimport IfoFoldableCard from './IfoFoldableCard'\n\ninterface Props {\n  ifo: Ifo\n}\n\nconst IfoCardV3Data: React.FC<Props> = ({ ifo }) => {\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\n  const walletIfoData = useGetWalletIfoV3Data(ifo)\n\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\n}\n\nexport default IfoCardV3Data\n","import { ifosConfig } from 'config/constants'\nimport { Ifo } from 'config/constants/types'\nimport React from 'react'\nimport IfoCardV1Data from './components/IfoCardV1Data'\nimport IfoCardV2Data from './components/IfoCardV2Data'\nimport IfoCardV3Data from './components/IfoCardV3Data'\nimport IfoLayout from './components/IfoLayout'\n\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\n\nconst PastIfo = () => {\n  return (\n    <IfoLayout maxWidth=\"736px\" m=\"auto\" width=\"100%\" id=\"past-ifos\" py={['24px', '24px', '40px']}>\n      {inactiveIfo.map((ifo) => {\n        switch (ifo.version) {\n          case 1:\n            return <IfoCardV1Data key={ifo.id} ifo={ifo} />\n          case 2:\n            return <IfoCardV2Data key={ifo.id} ifo={ifo} />\n          case 3:\n            return <IfoCardV3Data key={ifo.id} ifo={ifo} />\n          default:\n            return null\n        }\n      })}\n    </IfoLayout>\n  )\n}\n\nexport default PastIfo\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useFetchIfoPool } from 'state/pools/hooks'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\nconst Ifos = () => {\n  const { t } = useTranslation()\n  const { path, isExact } = useRouteMatch()\n\n  useFetchIfoPool()\n\n  return (\n    <>\n      <SubMenuItems\n        items={[\n          {\n            label: t('Latest'),\n            href: '/ifo',\n          },\n          {\n            label: t('Finished'),\n            href: '/ifo/history',\n          },\n        ]}\n        activeItem={isExact ? '/ifo' : '/ifo/history'}\n      />\n      <>\n        <Hero />\n        <Route exact path={`${path}`}>\n          <CurrentIfo />\n        </Route>\n        <Route path={`${path}/history`}>\n          <Container>\n            <PastIfo />\n          </Container>\n        </Route>\n      </>\n    </>\n  )\n}\n\nexport default Ifos\n","import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { batch, useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useFastFresh, useSlowFresh } from 'hooks/useRefresh'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getAprData } from 'views/Pools/helpers'\nimport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  fetchPoolsStakingLimitsAsync,\n  fetchIfoPoolFees,\n  fetchIfoPoolPublicData,\n  fetchIfoPoolUserAndCredit,\n  initialPoolVaultState,\n  fetchCakePoolPublicDataAsync,\n  fetchCakePoolUserDataAsync,\n} from '.'\nimport { State, DeserializedPool, VaultKey } from '../types'\nimport { transformPool } from './helpers'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from '../farms'\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const slowRefresh = useSlowFresh()\n\n  useEffect(() => {\n    const fetchPoolsDataWithFarms = async () => {\n      const activeFarms = nonArchivedFarms.filter((farm) => farm.pid !== 0)\n      await dispatch(fetchFarmsPublicDataAsync(activeFarms.map((farm) => farm.pid)))\n      batch(() => {\n        dispatch(fetchPoolsPublicDataAsync())\n        dispatch(fetchPoolsStakingLimitsAsync())\n      })\n    }\n\n    fetchPoolsDataWithFarms()\n  }, [dispatch, slowRefresh])\n}\n\nexport const useFetchUserPools = (account) => {\n  const fastRefresh = useFastFresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n}\n\nexport const usePools = (): { pools: DeserializedPool[]; userDataLoaded: boolean } => {\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const usePool = (sousId: number): { pool: DeserializedPool; userDataLoaded: boolean } => {\n  const { pool, userDataLoaded } = useSelector((state: State) => ({\n    pool: state.pools.data.find((p) => p.sousId === sousId),\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pool: transformPool(pool), userDataLoaded }\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const fastRefresh = useFastFresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useFetchIfoPool = (fetchCakePool = true) => {\n  const { account } = useWeb3React()\n  const fastRefresh = useFastFresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    batch(() => {\n      if (fetchCakePool) {\n        dispatch(fetchCakePoolPublicDataAsync())\n      }\n      dispatch(fetchIfoPoolPublicData())\n    })\n  }, [dispatch, fastRefresh, fetchCakePool])\n\n  useEffect(() => {\n    if (account) {\n      batch(() => {\n        dispatch(fetchIfoPoolUserAndCredit({ account }))\n        if (fetchCakePool) {\n          dispatch(fetchCakePoolUserDataAsync(account))\n        }\n      })\n    }\n  }, [dispatch, fastRefresh, account, fetchCakePool])\n\n  useEffect(() => {\n    dispatch(fetchIfoPoolFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  return useVaultPoolByKey(VaultKey.CakeVault)\n}\n\nexport const useVaultPools = () => {\n  return {\n    [VaultKey.CakeVault]: useVaultPoolByKey(VaultKey.CakeVault),\n    [VaultKey.IfoPool]: useVaultPoolByKey(VaultKey.IfoPool),\n  }\n}\n\nexport const useVaultPoolByKey = (key: VaultKey) => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => (key ? state.pools[key] : initialPoolVaultState))\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFeeAsDecimal,\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\nexport const useIfoPoolVault = () => {\n  return useVaultPoolByKey(VaultKey.IfoPool)\n}\n\nexport const useIfoPoolCreditBlock = () => {\n  return useSelector((state: State) => ({\n    creditStartBlock: state.pools.ifoPool.creditStartBlock,\n    creditEndBlock: state.pools.ifoPool.creditEndBlock,\n    hasEndBlockOver: state.block.currentBlock >= state.pools.ifoPool.creditEndBlock,\n  }))\n}\n\nexport const useIfoPoolCredit = () => {\n  const creditAsString = useSelector((state: State) => state.pools.ifoPool.userData?.credit ?? BIG_ZERO)\n  const credit = useMemo(() => {\n    return new BigNumber(creditAsString)\n  }, [creditAsString])\n\n  return credit\n}\n\nexport const useIfoWithApr = () => {\n  const {\n    fees: { performanceFeeAsDecimal },\n  } = useIfoPoolVault()\n  const { pool: poolZero } = usePool(0)\n\n  const ifoPoolWithApr = useMemo(() => {\n    const ifoPool = { ...poolZero }\n    ifoPool.vaultKey = VaultKey.IfoPool\n    ifoPool.apr = getAprData(ifoPool, performanceFeeAsDecimal).apr\n    ifoPool.rawApr = poolZero.apr\n    return ifoPool\n  }, [performanceFeeAsDecimal, poolZero])\n\n  return {\n    pool: ifoPoolWithApr,\n  }\n}\n","import React, { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { logError } from 'utils/sentry'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastSuccess, toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async (params = {}) => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm(params)\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        logError(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ExpandableLabel, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FoldableTextProps extends FlexProps {\n  title?: string\n}\n\nconst Wrapper = styled(Flex)`\n  cursor: pointer;\n`\n\nconst StyledExpandableLabelWrapper = styled(Flex)`\n  button {\n    align-items: center;\n    justify-content: flex-start;\n  }\n`\n\nconst StyledChildrenFlex = styled(Flex)<{ isExpanded?: boolean }>`\n  overflow: hidden;\n  height: ${({ isExpanded }) => (isExpanded ? '100%' : '0px')};\n  padding-bottom: ${({ isExpanded }) => (isExpanded ? '16px' : '0px')};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst FoldableText: React.FC<FoldableTextProps> = ({ title, children, ...props }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  return (\n    <Wrapper {...props} flexDirection=\"column\" onClick={() => setIsExpanded(!isExpanded)}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" pb=\"16px\">\n        <Text fontWeight=\"bold\">{title}</Text>\n        <StyledExpandableLabelWrapper>\n          <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n            {isExpanded ? t('Hide') : t('Details')}\n          </ExpandableLabel>\n        </StyledExpandableLabelWrapper>\n      </Flex>\n      <StyledChildrenFlex isExpanded={isExpanded} flexDirection=\"column\">\n        {children}\n      </StyledChildrenFlex>\n    </Wrapper>\n  )\n}\n\nexport default FoldableText\n","import { useCallback, useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = useCallback(() => {\n    setStateLastUpdated(Date.now())\n  }, [setStateLastUpdated])\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n"],"sourceRoot":""}